{"expireTime":9007200911873654000,"key":"transformer-remark-markdown-html-ast-87f8a243f94a80ab3935368f3f7d298e-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":3,"column":1,"offset":4},"end":{"line":3,"column":4,"offset":7}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"description: Review","position":{"start":{"line":5,"column":4,"offset":14},"end":{"line":5,"column":23,"offset":33}}}],"position":{"start":{"line":5,"column":1,"offset":11},"end":{"line":5,"column":23,"offset":33}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Review-Of-Previous-Concepts","position":{"start":{"line":7,"column":3,"offset":39},"end":{"line":7,"column":30,"offset":66}}}],"position":{"start":{"line":7,"column":1,"offset":37},"end":{"line":7,"column":30,"offset":66}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Review of Concepts","position":{"start":{"line":9,"column":5,"offset":74},"end":{"line":9,"column":23,"offset":92}}}],"position":{"start":{"line":9,"column":1,"offset":70},"end":{"line":9,"column":23,"offset":92}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Running JS Locally Concepts","position":{"start":{"line":11,"column":5,"offset":100},"end":{"line":11,"column":32,"offset":127}}}],"position":{"start":{"line":11,"column":1,"offset":96},"end":{"line":11,"column":32,"offset":127}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Match the commands ","position":{"start":{"line":13,"column":3,"offset":133},"end":{"line":13,"column":22,"offset":152}}},{"type":"raw","value":"<code class=\"language-text\">ls</code>","position":{"start":{"line":13,"column":22,"offset":152},"end":{"line":13,"column":26,"offset":156}}},{"type":"text","value":", ","position":{"start":{"line":13,"column":26,"offset":156},"end":{"line":13,"column":28,"offset":158}}},{"type":"raw","value":"<code class=\"language-text\">cd</code>","position":{"start":{"line":13,"column":28,"offset":158},"end":{"line":13,"column":32,"offset":162}}},{"type":"text","value":", ","position":{"start":{"line":13,"column":32,"offset":162},"end":{"line":13,"column":34,"offset":164}}},{"type":"raw","value":"<code class=\"language-text\">pwd</code>","position":{"start":{"line":13,"column":34,"offset":164},"end":{"line":13,"column":39,"offset":169}}},{"type":"text","value":" to their descriptions","position":{"start":{"line":13,"column":39,"offset":169},"end":{"line":13,"column":61,"offset":191}}}],"position":{"start":{"line":13,"column":3,"offset":133},"end":{"line":13,"column":61,"offset":191}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">ls</code>","position":{"start":{"line":14,"column":7,"offset":199},"end":{"line":14,"column":11,"offset":203}}},{"type":"text","value":" lists contents of current directory","position":{"start":{"line":14,"column":11,"offset":203},"end":{"line":14,"column":47,"offset":239}}}],"position":{"start":{"line":14,"column":5,"offset":197},"end":{"line":14,"column":47,"offset":239}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">cd</code>","position":{"start":{"line":15,"column":7,"offset":247},"end":{"line":15,"column":11,"offset":251}}},{"type":"text","value":" changes current directory","position":{"start":{"line":15,"column":11,"offset":251},"end":{"line":15,"column":37,"offset":277}}}],"position":{"start":{"line":15,"column":7,"offset":247},"end":{"line":15,"column":37,"offset":277}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">cd ..</code>","position":{"start":{"line":16,"column":11,"offset":289},"end":{"line":16,"column":18,"offset":296}}},{"type":"text","value":" takes you up one level","position":{"start":{"line":16,"column":18,"offset":296},"end":{"line":16,"column":41,"offset":319}}}],"position":{"start":{"line":16,"column":9,"offset":287},"end":{"line":16,"column":41,"offset":319}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">cd</code>","position":{"start":{"line":17,"column":11,"offset":331},"end":{"line":17,"column":15,"offset":335}}},{"type":"text","value":" alone takes you back home","position":{"start":{"line":17,"column":15,"offset":335},"end":{"line":17,"column":41,"offset":361}}}],"position":{"start":{"line":17,"column":9,"offset":329},"end":{"line":17,"column":41,"offset":361}}},{"type":"text","value":"\n"}],"position":{"start":{"line":16,"column":9,"offset":287},"end":{"line":17,"column":41,"offset":361}}},{"type":"text","value":"\n"}],"position":{"start":{"line":15,"column":5,"offset":245},"end":{"line":17,"column":41,"offset":361}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">pwd</code>","position":{"start":{"line":18,"column":7,"offset":369},"end":{"line":18,"column":12,"offset":374}}},{"type":"text","value":" returns current directory","position":{"start":{"line":18,"column":12,"offset":374},"end":{"line":18,"column":38,"offset":400}}}],"position":{"start":{"line":18,"column":5,"offset":367},"end":{"line":18,"column":38,"offset":400}}},{"type":"text","value":"\n"}],"position":{"start":{"line":14,"column":5,"offset":197},"end":{"line":18,"column":38,"offset":400}}},{"type":"text","value":"\n"}],"position":{"start":{"line":13,"column":1,"offset":131},"end":{"line":18,"column":38,"offset":400}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Given a folder structure diagram, a list of 'cd ","position":{"start":{"line":19,"column":3,"offset":404},"end":{"line":19,"column":51,"offset":452}}},{"type":"text","value":"(","position":{"start":{"line":19,"column":51,"offset":452},"end":{"line":19,"column":53,"offset":454}}},{"type":"text","value":"path","position":{"start":{"line":19,"column":53,"offset":454},"end":{"line":19,"column":57,"offset":458}}},{"type":"text","value":")","position":{"start":{"line":19,"column":57,"offset":458},"end":{"line":19,"column":59,"offset":460}}},{"type":"text","value":"' commands and target files, match the paths to the target files.","position":{"start":{"line":19,"column":59,"offset":460},"end":{"line":19,"column":124,"offset":525}}}],"position":{"start":{"line":19,"column":1,"offset":402},"end":{"line":19,"column":124,"offset":525}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Use VSCode to create a folder. Within the folder create a .js file containing ","position":{"start":{"line":20,"column":3,"offset":529},"end":{"line":20,"column":81,"offset":607}}},{"type":"raw","value":"<code class=\"language-text\">console.log('hello new world');</code>","position":{"start":{"line":20,"column":81,"offset":607},"end":{"line":20,"column":114,"offset":640}}},{"type":"text","value":" and save it.","position":{"start":{"line":20,"column":114,"offset":640},"end":{"line":20,"column":127,"offset":653}}}],"position":{"start":{"line":20,"column":1,"offset":527},"end":{"line":20,"column":127,"offset":653}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Use node to execute a JavaScript file in the terminal","position":{"start":{"line":21,"column":3,"offset":657},"end":{"line":21,"column":56,"offset":710}}}],"position":{"start":{"line":21,"column":1,"offset":655},"end":{"line":21,"column":56,"offset":710}}},{"type":"text","value":"\n"}],"position":{"start":{"line":13,"column":1,"offset":131},"end":{"line":21,"column":56,"offset":710}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Plain Old JS Object Lesson Concepts","position":{"start":{"line":23,"column":5,"offset":718},"end":{"line":23,"column":40,"offset":753}}}],"position":{"start":{"line":23,"column":1,"offset":714},"end":{"line":23,"column":40,"offset":753}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Label variables as either Primitive vs. Reference","position":{"start":{"line":25,"column":3,"offset":759},"end":{"line":25,"column":52,"offset":808}}}],"position":{"start":{"line":25,"column":3,"offset":759},"end":{"line":25,"column":52,"offset":808}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"primitives: strings, booleans, numbers, null and undefined","position":{"start":{"line":26,"column":7,"offset":816},"end":{"line":26,"column":65,"offset":874}}}],"position":{"start":{"line":26,"column":7,"offset":816},"end":{"line":26,"column":65,"offset":874}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"primitives are immutable","position":{"start":{"line":27,"column":11,"offset":886},"end":{"line":27,"column":35,"offset":910}}}],"position":{"start":{"line":27,"column":9,"offset":884},"end":{"line":27,"column":35,"offset":910}}},{"type":"text","value":"\n"}],"position":{"start":{"line":27,"column":9,"offset":884},"end":{"line":27,"column":35,"offset":910}}},{"type":"text","value":"\n"}],"position":{"start":{"line":26,"column":5,"offset":814},"end":{"line":27,"column":35,"offset":910}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"refereces: objects ","position":{"start":{"line":28,"column":7,"offset":918},"end":{"line":28,"column":26,"offset":937}}},{"type":"text","value":"(","position":{"start":{"line":28,"column":26,"offset":937},"end":{"line":28,"column":28,"offset":939}}},{"type":"text","value":"including arrays","position":{"start":{"line":28,"column":28,"offset":939},"end":{"line":28,"column":44,"offset":955}}},{"type":"text","value":")","position":{"start":{"line":28,"column":44,"offset":955},"end":{"line":28,"column":46,"offset":957}}}],"position":{"start":{"line":28,"column":7,"offset":918},"end":{"line":28,"column":46,"offset":957}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"references are mutable","position":{"start":{"line":29,"column":11,"offset":969},"end":{"line":29,"column":33,"offset":991}}}],"position":{"start":{"line":29,"column":9,"offset":967},"end":{"line":29,"column":33,"offset":991}}},{"type":"text","value":"\n"}],"position":{"start":{"line":29,"column":9,"offset":967},"end":{"line":29,"column":33,"offset":991}}},{"type":"text","value":"\n"}],"position":{"start":{"line":28,"column":5,"offset":916},"end":{"line":29,"column":33,"offset":991}}},{"type":"text","value":"\n"}],"position":{"start":{"line":26,"column":5,"offset":814},"end":{"line":29,"column":33,"offset":991}}},{"type":"text","value":"\n"}],"position":{"start":{"line":25,"column":1,"offset":757},"end":{"line":29,"column":33,"offset":991}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Identify when to use ","position":{"start":{"line":30,"column":3,"offset":995},"end":{"line":30,"column":24,"offset":1016}}},{"type":"raw","value":"<code class=\"language-text\">.</code>","position":{"start":{"line":30,"column":24,"offset":1016},"end":{"line":30,"column":27,"offset":1019}}},{"type":"text","value":" vs ","position":{"start":{"line":30,"column":27,"offset":1019},"end":{"line":30,"column":31,"offset":1023}}},{"type":"raw","value":"<code class=\"language-text\">[]</code>","position":{"start":{"line":30,"column":31,"offset":1023},"end":{"line":30,"column":35,"offset":1027}}},{"type":"text","value":" when accessing values of an object","position":{"start":{"line":30,"column":35,"offset":1027},"end":{"line":30,"column":70,"offset":1062}}}],"position":{"start":{"line":30,"column":3,"offset":995},"end":{"line":30,"column":70,"offset":1062}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"dot syntax ","position":{"start":{"line":31,"column":7,"offset":1070},"end":{"line":31,"column":18,"offset":1081}}},{"type":"raw","value":"<code class=\"language-text\">object.key</code>","position":{"start":{"line":31,"column":18,"offset":1081},"end":{"line":31,"column":30,"offset":1093}}}],"position":{"start":{"line":31,"column":7,"offset":1070},"end":{"line":31,"column":30,"offset":1093}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"easier to read","position":{"start":{"line":32,"column":11,"offset":1105},"end":{"line":32,"column":25,"offset":1119}}}],"position":{"start":{"line":32,"column":9,"offset":1103},"end":{"line":32,"column":25,"offset":1119}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"easier to write","position":{"start":{"line":33,"column":11,"offset":1131},"end":{"line":33,"column":26,"offset":1146}}}],"position":{"start":{"line":33,"column":9,"offset":1129},"end":{"line":33,"column":26,"offset":1146}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"cannot use variables as keys","position":{"start":{"line":34,"column":11,"offset":1158},"end":{"line":34,"column":39,"offset":1186}}}],"position":{"start":{"line":34,"column":9,"offset":1156},"end":{"line":34,"column":39,"offset":1186}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"keys cannot begin with a number","position":{"start":{"line":35,"column":11,"offset":1198},"end":{"line":35,"column":42,"offset":1229}}}],"position":{"start":{"line":35,"column":9,"offset":1196},"end":{"line":35,"column":42,"offset":1229}}},{"type":"text","value":"\n"}],"position":{"start":{"line":32,"column":9,"offset":1103},"end":{"line":35,"column":42,"offset":1229}}},{"type":"text","value":"\n"}],"position":{"start":{"line":31,"column":5,"offset":1068},"end":{"line":35,"column":42,"offset":1229}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"bracket notation ","position":{"start":{"line":36,"column":7,"offset":1237},"end":{"line":36,"column":24,"offset":1254}}},{"type":"raw","value":"<code class=\"language-text\">object[\"key]</code>","position":{"start":{"line":36,"column":24,"offset":1254},"end":{"line":36,"column":38,"offset":1268}}}],"position":{"start":{"line":36,"column":7,"offset":1237},"end":{"line":36,"column":38,"offset":1268}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"allows variables as keys","position":{"start":{"line":37,"column":11,"offset":1280},"end":{"line":37,"column":35,"offset":1304}}}],"position":{"start":{"line":37,"column":9,"offset":1278},"end":{"line":37,"column":35,"offset":1304}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"strings that start with numbers can be use as keys","position":{"start":{"line":38,"column":11,"offset":1316},"end":{"line":38,"column":61,"offset":1366}}}],"position":{"start":{"line":38,"column":9,"offset":1314},"end":{"line":38,"column":61,"offset":1366}}},{"type":"text","value":"\n"}],"position":{"start":{"line":37,"column":9,"offset":1278},"end":{"line":38,"column":61,"offset":1366}}},{"type":"text","value":"\n"}],"position":{"start":{"line":36,"column":5,"offset":1235},"end":{"line":38,"column":61,"offset":1366}}},{"type":"text","value":"\n"}],"position":{"start":{"line":31,"column":5,"offset":1068},"end":{"line":38,"column":61,"offset":1366}}},{"type":"text","value":"\n"}],"position":{"start":{"line":30,"column":1,"offset":993},"end":{"line":38,"column":61,"offset":1366}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Write an object literal with a variable key using interpolation","position":{"start":{"line":39,"column":3,"offset":1370},"end":{"line":39,"column":66,"offset":1433}}}],"position":{"start":{"line":39,"column":3,"offset":1370},"end":{"line":39,"column":66,"offset":1433}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"put it in brackets to access the value of the variable, rather than just make the value that string","position":{"start":{"line":41,"column":7,"offset":1443},"end":{"line":41,"column":106,"offset":1542}}}],"position":{"start":{"line":41,"column":5,"offset":1441},"end":{"line":41,"column":106,"offset":1542}}},{"type":"text","value":"\n"}],"position":{"start":{"line":41,"column":5,"offset":1441},"end":{"line":41,"column":106,"offset":1542}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">'letter_a'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">'letter b'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":43,"column":3,"offset":1548},"end":{"line":47,"column":6,"offset":1641}}},{"type":"text","value":"\n"}],"position":{"start":{"line":39,"column":1,"offset":1368},"end":{"line":48,"column":1,"offset":1643}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Use the ","position":{"start":{"line":49,"column":3,"offset":1647},"end":{"line":49,"column":11,"offset":1655}}},{"type":"raw","value":"<code class=\"language-text\">obj[key] !== undefined</code>","position":{"start":{"line":49,"column":11,"offset":1655},"end":{"line":49,"column":35,"offset":1679}}},{"type":"text","value":" pattern to check if a given variable that contains a key exists in an object","position":{"start":{"line":49,"column":35,"offset":1679},"end":{"line":49,"column":112,"offset":1756}}}],"position":{"start":{"line":49,"column":1,"offset":1645},"end":{"line":49,"column":112,"offset":1756}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"can also use ","position":{"start":{"line":50,"column":5,"offset":1762},"end":{"line":50,"column":18,"offset":1775}}},{"type":"raw","value":"<code class=\"language-text\">(key in object)</code>","position":{"start":{"line":50,"column":18,"offset":1775},"end":{"line":50,"column":35,"offset":1792}}},{"type":"text","value":" syntax interchangeably ","position":{"start":{"line":50,"column":35,"offset":1792},"end":{"line":50,"column":59,"offset":1816}}},{"type":"text","value":"(","position":{"start":{"line":50,"column":59,"offset":1816},"end":{"line":50,"column":61,"offset":1818}}},{"type":"text","value":"returns a boolean","position":{"start":{"line":50,"column":61,"offset":1818},"end":{"line":50,"column":78,"offset":1835}}},{"type":"text","value":")","position":{"start":{"line":50,"column":78,"offset":1835},"end":{"line":50,"column":80,"offset":1837}}}],"position":{"start":{"line":50,"column":3,"offset":1760},"end":{"line":50,"column":80,"offset":1837}}},{"type":"text","value":"\n"}],"position":{"start":{"line":50,"column":3,"offset":1760},"end":{"line":50,"column":80,"offset":1837}}},{"type":"text","value":"\n"}],"position":{"start":{"line":50,"column":1,"offset":1758},"end":{"line":50,"column":80,"offset":1837}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Utilize Object.keys and Object.values in a function","position":{"start":{"line":51,"column":3,"offset":1841},"end":{"line":51,"column":54,"offset":1892}}}],"position":{"start":{"line":51,"column":3,"offset":1841},"end":{"line":51,"column":54,"offset":1892}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">Object.keys(obj)</code>","position":{"start":{"line":52,"column":7,"offset":1900},"end":{"line":52,"column":25,"offset":1918}}},{"type":"text","value":" returns an array of all the keys in ","position":{"start":{"line":52,"column":25,"offset":1918},"end":{"line":52,"column":62,"offset":1955}}},{"type":"raw","value":"<code class=\"language-text\">obj</code>","position":{"start":{"line":52,"column":62,"offset":1955},"end":{"line":52,"column":67,"offset":1960}}}],"position":{"start":{"line":52,"column":5,"offset":1898},"end":{"line":52,"column":67,"offset":1960}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">Object.values(obj)</code>","position":{"start":{"line":53,"column":7,"offset":1968},"end":{"line":53,"column":27,"offset":1988}}},{"type":"text","value":" returns an array of the values in ","position":{"start":{"line":53,"column":27,"offset":1988},"end":{"line":53,"column":62,"offset":2023}}},{"type":"raw","value":"<code class=\"language-text\">obj</code>","position":{"start":{"line":53,"column":62,"offset":2023},"end":{"line":53,"column":67,"offset":2028}}}],"position":{"start":{"line":53,"column":5,"offset":1966},"end":{"line":53,"column":67,"offset":2028}}},{"type":"text","value":"\n"}],"position":{"start":{"line":52,"column":5,"offset":1898},"end":{"line":53,"column":67,"offset":2028}}},{"type":"text","value":"\n"}],"position":{"start":{"line":51,"column":1,"offset":1839},"end":{"line":53,"column":67,"offset":2028}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Iterate through an object using a ","position":{"start":{"line":54,"column":3,"offset":2032},"end":{"line":54,"column":37,"offset":2066}}},{"type":"raw","value":"<code class=\"language-text\">for in</code>","position":{"start":{"line":54,"column":37,"offset":2066},"end":{"line":54,"column":45,"offset":2074}}},{"type":"text","value":" loop","position":{"start":{"line":54,"column":45,"offset":2074},"end":{"line":54,"column":50,"offset":2079}}}],"position":{"start":{"line":54,"column":1,"offset":2030},"end":{"line":54,"column":50,"offset":2079}}},{"type":"text","value":"\n"}],"position":{"start":{"line":25,"column":1,"offset":757},"end":{"line":54,"column":50,"offset":2079}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">printValues</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n           console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":56,"column":1,"offset":2083},"end":{"line":64,"column":5,"offset":2258}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define a function that utilizes ","position":{"start":{"line":66,"column":3,"offset":2264},"end":{"line":66,"column":35,"offset":2296}}},{"type":"raw","value":"<code class=\"language-text\">...rest</code>","position":{"start":{"line":66,"column":35,"offset":2296},"end":{"line":66,"column":44,"offset":2305}}},{"type":"text","value":" syntax to accept an arbitrary number of arguments","position":{"start":{"line":66,"column":44,"offset":2305},"end":{"line":66,"column":94,"offset":2355}}}],"position":{"start":{"line":66,"column":3,"offset":2264},"end":{"line":66,"column":94,"offset":2355}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">...rest</code>","position":{"start":{"line":68,"column":7,"offset":2365},"end":{"line":68,"column":16,"offset":2374}}},{"type":"text","value":" syntax will store all additional arguments in an array","position":{"start":{"line":68,"column":16,"offset":2374},"end":{"line":68,"column":71,"offset":2429}}}],"position":{"start":{"line":68,"column":5,"offset":2363},"end":{"line":68,"column":71,"offset":2429}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"array will be empty if there are no additional arguments","position":{"start":{"line":69,"column":7,"offset":2437},"end":{"line":69,"column":63,"offset":2493}}}],"position":{"start":{"line":69,"column":5,"offset":2435},"end":{"line":69,"column":63,"offset":2493}}},{"type":"text","value":"\n"}],"position":{"start":{"line":68,"column":5,"offset":2363},"end":{"line":69,"column":63,"offset":2493}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n    <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myFunction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>strs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The first string is '</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The rest of the strings are:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        strs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":71,"column":3,"offset":2499},"end":{"line":80,"column":6,"offset":2788}}},{"type":"text","value":"\n"}],"position":{"start":{"line":66,"column":1,"offset":2262},"end":{"line":80,"column":6,"offset":2788}}},{"type":"text","value":"\n"}],"position":{"start":{"line":66,"column":1,"offset":2262},"end":{"line":80,"column":6,"offset":2788}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[],"position":{"start":{"line":82,"column":1,"offset":2792},"end":{"line":82,"column":4,"offset":2795}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Use ","position":{"start":{"line":84,"column":3,"offset":2801},"end":{"line":84,"column":7,"offset":2805}}},{"type":"raw","value":"<code class=\"language-text\">...spread</code>","position":{"start":{"line":84,"column":7,"offset":2805},"end":{"line":84,"column":18,"offset":2816}}},{"type":"text","value":" syntax for Object literals and Array literals","position":{"start":{"line":84,"column":18,"offset":2816},"end":{"line":84,"column":64,"offset":2862}}}],"position":{"start":{"line":84,"column":1,"offset":2799},"end":{"line":84,"column":64,"offset":2862}}},{"type":"text","value":"\n"}],"position":{"start":{"line":84,"column":1,"offset":2799},"end":{"line":84,"column":64,"offset":2862}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">let</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> longer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"b\", \"c\", \"d\", \"e\"]</span>\n   <span class=\"token comment\">// without spread syntax, this would give you a nested array</span>\n   <span class=\"token keyword\">let</span> withoutRest <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr1<span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [[\"a\", \"b\", \"c\"], \"d\", \"e\"]</span></code></pre></div>","position":{"start":{"line":86,"column":1,"offset":2866},"end":{"line":92,"column":5,"offset":3121}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Destructure an array to reference specific elements","position":{"start":{"line":94,"column":3,"offset":3127},"end":{"line":94,"column":54,"offset":3178}}}],"position":{"start":{"line":94,"column":3,"offset":3127},"end":{"line":94,"column":54,"offset":3178}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"`","position":{"start":{"line":96,"column":5,"offset":3186},"end":{"line":96,"column":7,"offset":3188}}},{"type":"text","value":"`","position":{"start":{"line":96,"column":7,"offset":3188},"end":{"line":96,"column":9,"offset":3190}}},{"type":"text","value":"`","position":{"start":{"line":96,"column":9,"offset":3190},"end":{"line":96,"column":11,"offset":3192}}},{"type":"text","value":"javascript","position":{"start":{"line":96,"column":11,"offset":3192},"end":{"line":96,"column":21,"offset":3202}}}],"position":{"start":{"line":96,"column":5,"offset":3186},"end":{"line":96,"column":21,"offset":3202}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"let array = ","position":{"start":{"line":98,"column":5,"offset":3210},"end":{"line":98,"column":17,"offset":3222}}},{"type":"text","value":"[","position":{"start":{"line":98,"column":17,"offset":3222},"end":{"line":98,"column":19,"offset":3224}}},{"type":"text","value":"35,9","position":{"start":{"line":98,"column":19,"offset":3224},"end":{"line":98,"column":23,"offset":3228}}},{"type":"text","value":"]","position":{"start":{"line":98,"column":23,"offset":3228},"end":{"line":98,"column":25,"offset":3230}}},{"type":"text","value":";","position":{"start":{"line":98,"column":25,"offset":3230},"end":{"line":98,"column":26,"offset":3231}}}],"position":{"start":{"line":98,"column":5,"offset":3210},"end":{"line":98,"column":26,"offset":3231}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"let ","position":{"start":{"line":100,"column":5,"offset":3239},"end":{"line":100,"column":9,"offset":3243}}},{"type":"text","value":"[","position":{"start":{"line":100,"column":9,"offset":3243},"end":{"line":100,"column":11,"offset":3245}}},{"type":"text","value":"firstEl, secondEl","position":{"start":{"line":100,"column":11,"offset":3245},"end":{"line":100,"column":28,"offset":3262}}},{"type":"text","value":"]","position":{"start":{"line":100,"column":28,"offset":3262},"end":{"line":100,"column":30,"offset":3264}}},{"type":"text","value":" = array;","position":{"start":{"line":100,"column":30,"offset":3264},"end":{"line":100,"column":39,"offset":3273}}}],"position":{"start":{"line":100,"column":5,"offset":3239},"end":{"line":100,"column":39,"offset":3273}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"console.log","position":{"start":{"line":102,"column":5,"offset":3281},"end":{"line":102,"column":16,"offset":3292}}},{"type":"text","value":"(","position":{"start":{"line":102,"column":16,"offset":3292},"end":{"line":102,"column":18,"offset":3294}}},{"type":"text","value":"firstEl","position":{"start":{"line":102,"column":18,"offset":3294},"end":{"line":102,"column":25,"offset":3301}}},{"type":"text","value":")","position":{"start":{"line":102,"column":25,"offset":3301},"end":{"line":102,"column":27,"offset":3303}}},{"type":"text","value":"; // =","position":{"start":{"line":102,"column":27,"offset":3303},"end":{"line":102,"column":33,"offset":3309}}},{"type":"text","value":">","position":{"start":{"line":102,"column":33,"offset":3309},"end":{"line":102,"column":37,"offset":3313}}},{"type":"text","value":" 35","position":{"start":{"line":102,"column":37,"offset":3313},"end":{"line":102,"column":40,"offset":3316}}}],"position":{"start":{"line":102,"column":5,"offset":3281},"end":{"line":102,"column":40,"offset":3316}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"console.log","position":{"start":{"line":104,"column":5,"offset":3324},"end":{"line":104,"column":16,"offset":3335}}},{"type":"text","value":"(","position":{"start":{"line":104,"column":16,"offset":3335},"end":{"line":104,"column":18,"offset":3337}}},{"type":"text","value":"secondEl","position":{"start":{"line":104,"column":18,"offset":3337},"end":{"line":104,"column":26,"offset":3345}}},{"type":"text","value":")","position":{"start":{"line":104,"column":26,"offset":3345},"end":{"line":104,"column":28,"offset":3347}}},{"type":"text","value":"; // =","position":{"start":{"line":104,"column":28,"offset":3347},"end":{"line":104,"column":34,"offset":3353}}},{"type":"text","value":">","position":{"start":{"line":104,"column":34,"offset":3353},"end":{"line":104,"column":38,"offset":3357}}},{"type":"text","value":" 9","position":{"start":{"line":104,"column":38,"offset":3357},"end":{"line":104,"column":40,"offset":3359}}}],"position":{"start":{"line":104,"column":5,"offset":3324},"end":{"line":104,"column":40,"offset":3359}}},{"type":"text","value":"\n"}],"position":{"start":{"line":94,"column":1,"offset":3125},"end":{"line":104,"column":40,"offset":3359}}},{"type":"text","value":"\n"}],"position":{"start":{"line":94,"column":1,"offset":3125},"end":{"line":104,"column":40,"offset":3359}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"// can also destructure using ... syntax let array = ","position":{"start":{"line":106,"column":1,"offset":3363},"end":{"line":106,"column":54,"offset":3416}}},{"type":"text","value":"[","position":{"start":{"line":106,"column":54,"offset":3416},"end":{"line":106,"column":56,"offset":3418}}},{"type":"text","value":"35,9,14","position":{"start":{"line":106,"column":56,"offset":3418},"end":{"line":106,"column":63,"offset":3425}}},{"type":"text","value":"]","position":{"start":{"line":106,"column":63,"offset":3425},"end":{"line":106,"column":65,"offset":3427}}},{"type":"text","value":"; let ","position":{"start":{"line":106,"column":65,"offset":3427},"end":{"line":106,"column":71,"offset":3433}}},{"type":"text","value":"[","position":{"start":{"line":106,"column":71,"offset":3433},"end":{"line":106,"column":73,"offset":3435}}},{"type":"text","value":"head, ...tail","position":{"start":{"line":106,"column":73,"offset":3435},"end":{"line":106,"column":86,"offset":3448}}},{"type":"text","value":"]","position":{"start":{"line":106,"column":86,"offset":3448},"end":{"line":106,"column":88,"offset":3450}}},{"type":"text","value":" = array; console.log","position":{"start":{"line":106,"column":88,"offset":3450},"end":{"line":106,"column":109,"offset":3471}}},{"type":"text","value":"(","position":{"start":{"line":106,"column":109,"offset":3471},"end":{"line":106,"column":111,"offset":3473}}},{"type":"text","value":"head","position":{"start":{"line":106,"column":111,"offset":3473},"end":{"line":106,"column":115,"offset":3477}}},{"type":"text","value":")","position":{"start":{"line":106,"column":115,"offset":3477},"end":{"line":106,"column":117,"offset":3479}}},{"type":"text","value":"; // =","position":{"start":{"line":106,"column":117,"offset":3479},"end":{"line":106,"column":123,"offset":3485}}},{"type":"text","value":">","position":{"start":{"line":106,"column":123,"offset":3485},"end":{"line":106,"column":127,"offset":3489}}},{"type":"text","value":" 35 console.log","position":{"start":{"line":106,"column":127,"offset":3489},"end":{"line":106,"column":142,"offset":3504}}},{"type":"text","value":"(","position":{"start":{"line":106,"column":142,"offset":3504},"end":{"line":106,"column":144,"offset":3506}}},{"type":"text","value":"tail","position":{"start":{"line":106,"column":144,"offset":3506},"end":{"line":106,"column":148,"offset":3510}}},{"type":"text","value":")","position":{"start":{"line":106,"column":148,"offset":3510},"end":{"line":106,"column":150,"offset":3512}}},{"type":"text","value":"; // =","position":{"start":{"line":106,"column":150,"offset":3512},"end":{"line":106,"column":156,"offset":3518}}},{"type":"text","value":">","position":{"start":{"line":106,"column":156,"offset":3518},"end":{"line":106,"column":160,"offset":3522}}},{"type":"text","value":" ","position":{"start":{"line":106,"column":160,"offset":3522},"end":{"line":106,"column":161,"offset":3523}}},{"type":"text","value":"[","position":{"start":{"line":106,"column":161,"offset":3523},"end":{"line":106,"column":163,"offset":3525}}},{"type":"text","value":"9, 14","position":{"start":{"line":106,"column":163,"offset":3525},"end":{"line":106,"column":168,"offset":3530}}},{"type":"text","value":"]","position":{"start":{"line":106,"column":168,"offset":3530},"end":{"line":106,"column":170,"offset":3532}}}],"position":{"start":{"line":106,"column":1,"offset":3363},"end":{"line":106,"column":170,"offset":3532}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token operator\">-</span> Destructure an object to reference specific values\n   <span class=\"token operator\">-</span> <span class=\"token keyword\">if</span> you want to use variable names that don't match the keys<span class=\"token punctuation\">,</span> you can use aliasing\n      <span class=\"token operator\">-</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">let { oldkeyname: newkeyname } = object</span><span class=\"token template-punctuation string\">`</span></span>\n   <span class=\"token operator\">-</span> rule <span class=\"token keyword\">of</span> thumb—only destructure values from objects that are two levels deep\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>`js\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Wilfred\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">appearance</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"short\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mustache\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">favorites</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mauve\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">food</span><span class=\"token operator\">:</span> <span class=\"token string\">\"spaghetti squash\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">number</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// with variable names that match keys</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> appearance <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Wilfred\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>appearance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"short\", \"mustache\"]</span>\n\n<span class=\"token comment\">// with new variable names (aliasing)</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> myName<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">appearance</span><span class=\"token operator\">:</span> myAppearance<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Wilfred\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myAppearance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"short\", \"mustache\"]</span>\n\n<span class=\"token comment\">// in a function call</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hello Wilfred\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// nested objects + aliasing</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">favorites</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>color<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">food</span><span class=\"token operator\">:</span> vegetable<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">,</span> vegetable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> mauve spaghetti squash</span></code></pre></div>","position":{"start":{"line":108,"column":1,"offset":3536},"end":{"line":144,"column":4,"offset":4607}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Write a function that accepts a array as an argument and returns an object representing the count of each character in the array","position":{"start":{"line":146,"column":3,"offset":4613},"end":{"line":146,"column":131,"offset":4741}}}],"position":{"start":{"line":146,"column":1,"offset":4611},"end":{"line":146,"column":131,"offset":4741}}},{"type":"text","value":"\n"}],"position":{"start":{"line":146,"column":1,"offset":4611},"end":{"line":146,"column":131,"offset":4741}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token comment\">//</span>\n   <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">elementCounts</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n       array<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">[</span>el<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">else</span> obj<span class=\"token punctuation\">[</span>el<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">elementCounts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => Object {e: 1, f: 2, g: 1}</span></code></pre></div>","position":{"start":{"line":148,"column":1,"offset":4745},"end":{"line":160,"column":5,"offset":5077}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Callbacks Lesson Concepts","position":{"start":{"line":162,"column":5,"offset":5085},"end":{"line":162,"column":30,"offset":5110}}}],"position":{"start":{"line":162,"column":1,"offset":5081},"end":{"line":162,"column":30,"offset":5110}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given multiple plausible reasons, identify why functions are called \"First Class Objects\" in JavaScript.","position":{"start":{"line":164,"column":3,"offset":5116},"end":{"line":164,"column":107,"offset":5220}}}],"position":{"start":{"line":164,"column":3,"offset":5116},"end":{"line":164,"column":107,"offset":5220}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"they can be stored in variables, passed as arguments to other functions, and serve as return value for a function","position":{"start":{"line":165,"column":7,"offset":5228},"end":{"line":165,"column":120,"offset":5341}}}],"position":{"start":{"line":165,"column":5,"offset":5226},"end":{"line":165,"column":120,"offset":5341}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"supports same basic operations as other types ","position":{"start":{"line":166,"column":7,"offset":5349},"end":{"line":166,"column":53,"offset":5395}}},{"type":"text","value":"(","position":{"start":{"line":166,"column":53,"offset":5395},"end":{"line":166,"column":55,"offset":5397}}},{"type":"text","value":"strings, bools, numbers","position":{"start":{"line":166,"column":55,"offset":5397},"end":{"line":166,"column":78,"offset":5420}}},{"type":"text","value":")","position":{"start":{"line":166,"column":78,"offset":5420},"end":{"line":166,"column":80,"offset":5422}}}],"position":{"start":{"line":166,"column":5,"offset":5347},"end":{"line":166,"column":80,"offset":5422}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"higher-order functions take functions as arguments or return functions as values","position":{"start":{"line":167,"column":7,"offset":5430},"end":{"line":167,"column":87,"offset":5510}}}],"position":{"start":{"line":167,"column":5,"offset":5428},"end":{"line":167,"column":87,"offset":5510}}},{"type":"text","value":"\n"}],"position":{"start":{"line":165,"column":5,"offset":5226},"end":{"line":167,"column":87,"offset":5510}}},{"type":"text","value":"\n"}],"position":{"start":{"line":164,"column":1,"offset":5114},"end":{"line":167,"column":87,"offset":5510}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Given a code snippet containing an anonymous callback, a named callback, and multiple ","position":{"start":{"line":168,"column":3,"offset":5514},"end":{"line":168,"column":89,"offset":5600}}},{"type":"raw","value":"<code class=\"language-text\">console.log</code>","position":{"start":{"line":168,"column":89,"offset":5600},"end":{"line":168,"column":102,"offset":5613}}},{"type":"text","value":"s, predict what will be printed","position":{"start":{"line":168,"column":102,"offset":5613},"end":{"line":168,"column":133,"offset":5644}}}],"position":{"start":{"line":168,"column":1,"offset":5512},"end":{"line":168,"column":133,"offset":5644}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"what is this referring to?","position":{"start":{"line":169,"column":5,"offset":5650},"end":{"line":169,"column":31,"offset":5676}}}],"position":{"start":{"line":169,"column":3,"offset":5648},"end":{"line":169,"column":31,"offset":5676}}},{"type":"text","value":"\n"}],"position":{"start":{"line":169,"column":3,"offset":5648},"end":{"line":169,"column":31,"offset":5676}}},{"type":"text","value":"\n"}],"position":{"start":{"line":169,"column":1,"offset":5646},"end":{"line":169,"column":31,"offset":5676}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Write a function that takes in a value and two callbacks. The function should return the result of the callback that is greater.","position":{"start":{"line":170,"column":3,"offset":5680},"end":{"line":170,"column":131,"offset":5808}}}],"position":{"start":{"line":170,"column":1,"offset":5678},"end":{"line":170,"column":131,"offset":5808}}},{"type":"text","value":"\n"}],"position":{"start":{"line":164,"column":1,"offset":5114},"end":{"line":170,"column":131,"offset":5808}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">greaterCB</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> callback1<span class=\"token punctuation\">,</span> callback2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">callback1</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token function\">callback2</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">callback1</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">callback2</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">greaterCB</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> callback1<span class=\"token punctuation\">,</span> callback2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">callback1</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token function\">callback2</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">callback1</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">callback2</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":172,"column":1,"offset":5812},"end":{"line":187,"column":4,"offset":6170}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"// shorter version let greaterCB = function","position":{"start":{"line":189,"column":1,"offset":6174},"end":{"line":189,"column":44,"offset":6217}}},{"type":"text","value":"(","position":{"start":{"line":189,"column":44,"offset":6217},"end":{"line":189,"column":46,"offset":6219}}},{"type":"text","value":"val, callback1, callback2","position":{"start":{"line":189,"column":46,"offset":6219},"end":{"line":189,"column":71,"offset":6244}}},{"type":"text","value":")","position":{"start":{"line":189,"column":71,"offset":6244},"end":{"line":189,"column":73,"offset":6246}}},{"type":"text","value":" { return Math.max","position":{"start":{"line":189,"column":73,"offset":6246},"end":{"line":189,"column":91,"offset":6264}}},{"type":"text","value":"(","position":{"start":{"line":189,"column":91,"offset":6264},"end":{"line":189,"column":93,"offset":6266}}},{"type":"text","value":"callback1","position":{"start":{"line":189,"column":93,"offset":6266},"end":{"line":189,"column":102,"offset":6275}}},{"type":"text","value":"(","position":{"start":{"line":189,"column":102,"offset":6275},"end":{"line":189,"column":104,"offset":6277}}},{"type":"text","value":"val","position":{"start":{"line":189,"column":104,"offset":6277},"end":{"line":189,"column":107,"offset":6280}}},{"type":"text","value":")","position":{"start":{"line":189,"column":107,"offset":6280},"end":{"line":189,"column":109,"offset":6282}}},{"type":"text","value":", callback2","position":{"start":{"line":189,"column":109,"offset":6282},"end":{"line":189,"column":120,"offset":6293}}},{"type":"text","value":"(","position":{"start":{"line":189,"column":120,"offset":6293},"end":{"line":189,"column":122,"offset":6295}}},{"type":"text","value":"val","position":{"start":{"line":189,"column":122,"offset":6295},"end":{"line":189,"column":125,"offset":6298}}},{"type":"text","value":")","position":{"start":{"line":189,"column":125,"offset":6298},"end":{"line":189,"column":127,"offset":6300}}},{"type":"text","value":")","position":{"start":{"line":189,"column":127,"offset":6300},"end":{"line":189,"column":129,"offset":6302}}},{"type":"text","value":"; } // even shorter, cause why not let greaterCB = ","position":{"start":{"line":189,"column":129,"offset":6302},"end":{"line":189,"column":180,"offset":6353}}},{"type":"text","value":"(","position":{"start":{"line":189,"column":180,"offset":6353},"end":{"line":189,"column":182,"offset":6355}}},{"type":"text","value":"val, cb1, cb2","position":{"start":{"line":189,"column":182,"offset":6355},"end":{"line":189,"column":195,"offset":6368}}},{"type":"text","value":")","position":{"start":{"line":189,"column":195,"offset":6368},"end":{"line":189,"column":197,"offset":6370}}},{"type":"text","value":" =","position":{"start":{"line":189,"column":197,"offset":6370},"end":{"line":189,"column":199,"offset":6372}}},{"type":"text","value":">","position":{"start":{"line":189,"column":199,"offset":6372},"end":{"line":189,"column":203,"offset":6376}}},{"type":"text","value":" Math.max","position":{"start":{"line":189,"column":203,"offset":6376},"end":{"line":189,"column":212,"offset":6385}}},{"type":"text","value":"(","position":{"start":{"line":189,"column":212,"offset":6385},"end":{"line":189,"column":214,"offset":6387}}},{"type":"text","value":"cb1","position":{"start":{"line":189,"column":214,"offset":6387},"end":{"line":189,"column":217,"offset":6390}}},{"type":"text","value":"(","position":{"start":{"line":189,"column":217,"offset":6390},"end":{"line":189,"column":219,"offset":6392}}},{"type":"text","value":"val","position":{"start":{"line":189,"column":219,"offset":6392},"end":{"line":189,"column":222,"offset":6395}}},{"type":"text","value":")","position":{"start":{"line":189,"column":222,"offset":6395},"end":{"line":189,"column":224,"offset":6397}}},{"type":"text","value":", cb2","position":{"start":{"line":189,"column":224,"offset":6397},"end":{"line":189,"column":229,"offset":6402}}},{"type":"text","value":"(","position":{"start":{"line":189,"column":229,"offset":6402},"end":{"line":189,"column":231,"offset":6404}}},{"type":"text","value":"val","position":{"start":{"line":189,"column":231,"offset":6404},"end":{"line":189,"column":234,"offset":6407}}},{"type":"text","value":")","position":{"start":{"line":189,"column":234,"offset":6407},"end":{"line":189,"column":236,"offset":6409}}},{"type":"text","value":")","position":{"start":{"line":189,"column":236,"offset":6409},"end":{"line":189,"column":238,"offset":6411}}},{"type":"text","value":";","position":{"start":{"line":189,"column":238,"offset":6411},"end":{"line":189,"column":239,"offset":6412}}}],"position":{"start":{"line":189,"column":1,"offset":6174},"end":{"line":189,"column":239,"offset":6412}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token operator\">-</span> Write a <span class=\"token keyword\">function</span><span class=\"token punctuation\">,</span> myMap<span class=\"token punctuation\">,</span> that takes <span class=\"token keyword\">in</span> an array and a callback <span class=\"token keyword\">as</span> arguments<span class=\"token punctuation\">.</span> The <span class=\"token keyword\">function</span> should mimic the behavior <span class=\"token keyword\">of</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Array#map</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>`js\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myMap</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mapped <span class=\"token operator\">=</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      newArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>mapped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> newArr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token function\">myMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">36</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => [4, 5, 6];</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myMapArrow</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   array<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ele<span class=\"token punctuation\">,</span> ind<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      newArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">,</span> ind<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> newArr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">myMapArrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">36</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => [4, 5, 6];</span></code></pre></div>","position":{"start":{"line":191,"column":1,"offset":6416},"end":{"line":214,"column":4,"offset":7096}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Write a function, myFilter, that takes in an array and a callback as arguments. The function should mimic the behavior of ","position":{"start":{"line":216,"column":3,"offset":7102},"end":{"line":216,"column":125,"offset":7224}}},{"type":"raw","value":"<code class=\"language-text\">Array#filter</code>","position":{"start":{"line":216,"column":125,"offset":7224},"end":{"line":216,"column":139,"offset":7238}}},{"type":"text","value":".","position":{"start":{"line":216,"column":139,"offset":7238},"end":{"line":216,"column":140,"offset":7239}}}],"position":{"start":{"line":216,"column":1,"offset":7100},"end":{"line":216,"column":140,"offset":7239}}},{"type":"text","value":"\n"}],"position":{"start":{"line":216,"column":1,"offset":7100},"end":{"line":216,"column":140,"offset":7239}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myFilter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">let</span> filtered <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               filtered<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":218,"column":1,"offset":7243},"end":{"line":228,"column":5,"offset":7511}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Write a function, myEvery, that takes in an array and a callback as arguments. The function should mimic the behavior of ","position":{"start":{"line":230,"column":3,"offset":7517},"end":{"line":230,"column":124,"offset":7638}}},{"type":"raw","value":"<code class=\"language-text\">Array#every</code>","position":{"start":{"line":230,"column":124,"offset":7638},"end":{"line":230,"column":137,"offset":7651}}},{"type":"text","value":".","position":{"start":{"line":230,"column":137,"offset":7651},"end":{"line":230,"column":138,"offset":7652}}}],"position":{"start":{"line":230,"column":1,"offset":7515},"end":{"line":230,"column":138,"offset":7652}}},{"type":"text","value":"\n"}],"position":{"start":{"line":230,"column":1,"offset":7515},"end":{"line":230,"column":138,"offset":7652}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myEvery</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n       <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// with arrow function syntax</span>\n   <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">myEvery</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n       <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":232,"column":1,"offset":7656},"end":{"line":251,"column":5,"offset":8161}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Scope Lesson Concepts","position":{"start":{"line":253,"column":5,"offset":8169},"end":{"line":253,"column":26,"offset":8190}}}],"position":{"start":{"line":253,"column":1,"offset":8165},"end":{"line":253,"column":26,"offset":8190}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Identify the difference between ","position":{"start":{"line":255,"column":3,"offset":8196},"end":{"line":255,"column":35,"offset":8228}}},{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":255,"column":35,"offset":8228},"end":{"line":255,"column":42,"offset":8235}}},{"type":"text","value":", ","position":{"start":{"line":255,"column":42,"offset":8235},"end":{"line":255,"column":44,"offset":8237}}},{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":255,"column":44,"offset":8237},"end":{"line":255,"column":49,"offset":8242}}},{"type":"text","value":", and ","position":{"start":{"line":255,"column":49,"offset":8242},"end":{"line":255,"column":55,"offset":8248}}},{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":255,"column":55,"offset":8248},"end":{"line":255,"column":60,"offset":8253}}},{"type":"text","value":" declarations","position":{"start":{"line":255,"column":60,"offset":8253},"end":{"line":255,"column":73,"offset":8266}}}],"position":{"start":{"line":255,"column":3,"offset":8196},"end":{"line":255,"column":73,"offset":8266}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":256,"column":7,"offset":8274},"end":{"line":256,"column":14,"offset":8281}}},{"type":"text","value":" - cannot reassign variable, scoped to block","position":{"start":{"line":256,"column":14,"offset":8281},"end":{"line":256,"column":58,"offset":8325}}}],"position":{"start":{"line":256,"column":5,"offset":8272},"end":{"line":256,"column":58,"offset":8325}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":257,"column":7,"offset":8333},"end":{"line":257,"column":12,"offset":8338}}},{"type":"text","value":" - can reassign variable, scoped to block","position":{"start":{"line":257,"column":12,"offset":8338},"end":{"line":257,"column":53,"offset":8379}}}],"position":{"start":{"line":257,"column":5,"offset":8331},"end":{"line":257,"column":53,"offset":8379}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":258,"column":7,"offset":8387},"end":{"line":258,"column":12,"offset":8392}}},{"type":"text","value":" - outdated, may or may not be reassigned, scoped to function. can be not just reassigned, but also redeclared!","position":{"start":{"line":258,"column":12,"offset":8392},"end":{"line":258,"column":123,"offset":8503}}}],"position":{"start":{"line":258,"column":5,"offset":8385},"end":{"line":258,"column":123,"offset":8503}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"a variable will always evaluate to the value it contains regardless of how it was declared","position":{"start":{"line":259,"column":7,"offset":8511},"end":{"line":259,"column":97,"offset":8601}}}],"position":{"start":{"line":259,"column":5,"offset":8509},"end":{"line":259,"column":97,"offset":8601}}},{"type":"text","value":"\n"}],"position":{"start":{"line":256,"column":5,"offset":8272},"end":{"line":259,"column":97,"offset":8601}}},{"type":"text","value":"\n"}],"position":{"start":{"line":255,"column":1,"offset":8194},"end":{"line":259,"column":97,"offset":8601}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Explain the difference between ","position":{"start":{"line":260,"column":3,"offset":8605},"end":{"line":260,"column":34,"offset":8636}}},{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":260,"column":34,"offset":8636},"end":{"line":260,"column":41,"offset":8643}}},{"type":"text","value":", ","position":{"start":{"line":260,"column":41,"offset":8643},"end":{"line":260,"column":43,"offset":8645}}},{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":260,"column":43,"offset":8645},"end":{"line":260,"column":48,"offset":8650}}},{"type":"text","value":", and ","position":{"start":{"line":260,"column":48,"offset":8650},"end":{"line":260,"column":54,"offset":8656}}},{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":260,"column":54,"offset":8656},"end":{"line":260,"column":59,"offset":8661}}},{"type":"text","value":" declarations","position":{"start":{"line":260,"column":59,"offset":8661},"end":{"line":260,"column":72,"offset":8674}}}],"position":{"start":{"line":260,"column":3,"offset":8605},"end":{"line":260,"column":72,"offset":8674}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":261,"column":7,"offset":8682},"end":{"line":261,"column":12,"offset":8687}}},{"type":"text","value":" is function scoped—so if you declare it anywhere in a function, the declaration ","position":{"start":{"line":261,"column":12,"offset":8687},"end":{"line":261,"column":93,"offset":8768}}},{"type":"text","value":"(","position":{"start":{"line":261,"column":93,"offset":8768},"end":{"line":261,"column":95,"offset":8770}}},{"type":"text","value":"but not assignment","position":{"start":{"line":261,"column":95,"offset":8770},"end":{"line":261,"column":113,"offset":8788}}},{"type":"text","value":")","position":{"start":{"line":261,"column":113,"offset":8788},"end":{"line":261,"column":115,"offset":8790}}},{"type":"text","value":" is \"hoisted\"","position":{"start":{"line":261,"column":115,"offset":8790},"end":{"line":261,"column":128,"offset":8803}}}],"position":{"start":{"line":261,"column":7,"offset":8682},"end":{"line":261,"column":128,"offset":8803}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"so it will exist in memory as \"undefined\" which is bad and unpredictable","position":{"start":{"line":262,"column":11,"offset":8815},"end":{"line":262,"column":83,"offset":8887}}}],"position":{"start":{"line":262,"column":9,"offset":8813},"end":{"line":262,"column":83,"offset":8887}}},{"type":"text","value":"\n"}],"position":{"start":{"line":262,"column":9,"offset":8813},"end":{"line":262,"column":83,"offset":8887}}},{"type":"text","value":"\n"}],"position":{"start":{"line":261,"column":5,"offset":8680},"end":{"line":262,"column":83,"offset":8887}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":263,"column":7,"offset":8895},"end":{"line":263,"column":12,"offset":8900}}},{"type":"text","value":" will also allow you to redeclare a variable, while ","position":{"start":{"line":263,"column":12,"offset":8900},"end":{"line":263,"column":64,"offset":8952}}},{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":263,"column":64,"offset":8952},"end":{"line":263,"column":69,"offset":8957}}},{"type":"text","value":" or ","position":{"start":{"line":263,"column":69,"offset":8957},"end":{"line":263,"column":73,"offset":8961}}},{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":263,"column":73,"offset":8961},"end":{"line":263,"column":80,"offset":8968}}},{"type":"text","value":" will raise a syntax error. you shouldn't be able to do that!","position":{"start":{"line":263,"column":80,"offset":8968},"end":{"line":263,"column":141,"offset":9029}}}],"position":{"start":{"line":263,"column":5,"offset":8893},"end":{"line":263,"column":141,"offset":9029}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":264,"column":7,"offset":9037},"end":{"line":264,"column":14,"offset":9044}}},{"type":"text","value":" won't let you reassign a variable, but if it points to a mutable object, you will still be able to change the value by mutating the object","position":{"start":{"line":264,"column":14,"offset":9044},"end":{"line":264,"column":153,"offset":9183}}}],"position":{"start":{"line":264,"column":5,"offset":9035},"end":{"line":264,"column":153,"offset":9183}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"block-scoped variables allow new variables with the same name in new scopes","position":{"start":{"line":265,"column":7,"offset":9191},"end":{"line":265,"column":82,"offset":9266}}}],"position":{"start":{"line":265,"column":5,"offset":9189},"end":{"line":265,"column":82,"offset":9266}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"block-scoped still performs hoisting of all variables within the block, but it doesn't initialize to the value of ","position":{"start":{"line":266,"column":7,"offset":9274},"end":{"line":266,"column":121,"offset":9388}}},{"type":"raw","value":"<code class=\"language-text\">undefined</code>","position":{"start":{"line":266,"column":121,"offset":9388},"end":{"line":266,"column":132,"offset":9399}}},{"type":"text","value":" like ","position":{"start":{"line":266,"column":132,"offset":9399},"end":{"line":266,"column":138,"offset":9405}}},{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":266,"column":138,"offset":9405},"end":{"line":266,"column":143,"offset":9410}}},{"type":"text","value":" does, so it throws a specific reference error if you try to access the value before it has been declared","position":{"start":{"line":266,"column":143,"offset":9410},"end":{"line":266,"column":248,"offset":9515}}}],"position":{"start":{"line":266,"column":5,"offset":9272},"end":{"line":266,"column":248,"offset":9515}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"if you do not use ","position":{"start":{"line":267,"column":7,"offset":9523},"end":{"line":267,"column":25,"offset":9541}}},{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":267,"column":25,"offset":9541},"end":{"line":267,"column":30,"offset":9546}}},{"type":"text","value":" or ","position":{"start":{"line":267,"column":30,"offset":9546},"end":{"line":267,"column":34,"offset":9550}}},{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":267,"column":34,"offset":9550},"end":{"line":267,"column":39,"offset":9555}}},{"type":"text","value":" or ","position":{"start":{"line":267,"column":39,"offset":9555},"end":{"line":267,"column":43,"offset":9559}}},{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":267,"column":43,"offset":9559},"end":{"line":267,"column":50,"offset":9566}}},{"type":"text","value":" when initializing, it will be declared as global—THIS IS BAD","position":{"start":{"line":267,"column":50,"offset":9566},"end":{"line":267,"column":111,"offset":9627}}}],"position":{"start":{"line":267,"column":7,"offset":9523},"end":{"line":267,"column":111,"offset":9627}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"if you assign a value without a declaration, it exists in the global scope ","position":{"start":{"line":268,"column":11,"offset":9639},"end":{"line":268,"column":86,"offset":9714}}},{"type":"text","value":"(","position":{"start":{"line":268,"column":86,"offset":9714},"end":{"line":268,"column":88,"offset":9716}}},{"type":"text","value":"so then it would be accessible by all outer scopes, so bad","position":{"start":{"line":268,"column":88,"offset":9716},"end":{"line":268,"column":146,"offset":9774}}},{"type":"text","value":")","position":{"start":{"line":268,"column":146,"offset":9774},"end":{"line":268,"column":148,"offset":9776}}},{"type":"text","value":". however, there's no hoisting, so it doesn't exist in the scope until after the line is run","position":{"start":{"line":268,"column":148,"offset":9776},"end":{"line":268,"column":240,"offset":9868}}}],"position":{"start":{"line":268,"column":9,"offset":9637},"end":{"line":268,"column":240,"offset":9868}}},{"type":"text","value":"\n"}],"position":{"start":{"line":268,"column":9,"offset":9637},"end":{"line":268,"column":240,"offset":9868}}},{"type":"text","value":"\n"}],"position":{"start":{"line":267,"column":5,"offset":9521},"end":{"line":268,"column":240,"offset":9868}}},{"type":"text","value":"\n"}],"position":{"start":{"line":261,"column":5,"offset":8680},"end":{"line":268,"column":240,"offset":9868}}},{"type":"text","value":"\n"}],"position":{"start":{"line":260,"column":1,"offset":8603},"end":{"line":268,"column":240,"offset":9868}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Predict the evaluation of code that utilizes function scope, block scope, lexical scope, and scope chaining","position":{"start":{"line":269,"column":3,"offset":9872},"end":{"line":269,"column":110,"offset":9979}}}],"position":{"start":{"line":269,"column":3,"offset":9872},"end":{"line":269,"column":110,"offset":9979}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"scope of a program means the set of variables that are available for use within the program","position":{"start":{"line":270,"column":7,"offset":9987},"end":{"line":270,"column":98,"offset":10078}}}],"position":{"start":{"line":270,"column":5,"offset":9985},"end":{"line":270,"column":98,"offset":10078}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"global scope is represented by the ","position":{"start":{"line":271,"column":7,"offset":10086},"end":{"line":271,"column":42,"offset":10121}}},{"type":"raw","value":"<code class=\"language-text\">window</code>","position":{"start":{"line":271,"column":42,"offset":10121},"end":{"line":271,"column":50,"offset":10129}}},{"type":"text","value":" object in the browser and the ","position":{"start":{"line":271,"column":50,"offset":10129},"end":{"line":271,"column":81,"offset":10160}}},{"type":"raw","value":"<code class=\"language-text\">global</code>","position":{"start":{"line":271,"column":81,"offset":10160},"end":{"line":271,"column":89,"offset":10168}}},{"type":"text","value":" object in Node.js","position":{"start":{"line":271,"column":89,"offset":10168},"end":{"line":271,"column":107,"offset":10186}}}],"position":{"start":{"line":271,"column":7,"offset":10086},"end":{"line":271,"column":107,"offset":10186}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"global variables are available everywhere, and so increase the risk of name collisions","position":{"start":{"line":272,"column":11,"offset":10198},"end":{"line":272,"column":97,"offset":10284}}}],"position":{"start":{"line":272,"column":9,"offset":10196},"end":{"line":272,"column":97,"offset":10284}}},{"type":"text","value":"\n"}],"position":{"start":{"line":272,"column":9,"offset":10196},"end":{"line":272,"column":97,"offset":10284}}},{"type":"text","value":"\n"}],"position":{"start":{"line":271,"column":5,"offset":10084},"end":{"line":272,"column":97,"offset":10284}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"local scope is the set of variables available for use within the function","position":{"start":{"line":273,"column":7,"offset":10292},"end":{"line":273,"column":80,"offset":10365}}}],"position":{"start":{"line":273,"column":7,"offset":10292},"end":{"line":273,"column":80,"offset":10365}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"when we enter a function, we enter a new scope","position":{"start":{"line":274,"column":11,"offset":10377},"end":{"line":274,"column":57,"offset":10423}}}],"position":{"start":{"line":274,"column":9,"offset":10375},"end":{"line":274,"column":57,"offset":10423}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"includes functions arguments, local variables declared inside function, and any variables that were already declared when the function is defined ","position":{"start":{"line":275,"column":11,"offset":10435},"end":{"line":275,"column":157,"offset":10581}}},{"type":"text","value":"(","position":{"start":{"line":275,"column":157,"offset":10581},"end":{"line":275,"column":159,"offset":10583}}},{"type":"text","value":"hmm about that last one","position":{"start":{"line":275,"column":159,"offset":10583},"end":{"line":275,"column":182,"offset":10606}}},{"type":"text","value":")","position":{"start":{"line":275,"column":182,"offset":10606},"end":{"line":275,"column":184,"offset":10608}}}],"position":{"start":{"line":275,"column":9,"offset":10433},"end":{"line":275,"column":184,"offset":10608}}},{"type":"text","value":"\n"}],"position":{"start":{"line":274,"column":9,"offset":10375},"end":{"line":275,"column":184,"offset":10608}}},{"type":"text","value":"\n"}],"position":{"start":{"line":273,"column":5,"offset":10290},"end":{"line":275,"column":184,"offset":10608}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"for blocks ","position":{"start":{"line":276,"column":7,"offset":10616},"end":{"line":276,"column":18,"offset":10627}}},{"type":"text","value":"(","position":{"start":{"line":276,"column":18,"offset":10627},"end":{"line":276,"column":20,"offset":10629}}},{"type":"text","value":"denoted by curly braces ","position":{"start":{"line":276,"column":20,"offset":10629},"end":{"line":276,"column":44,"offset":10653}}},{"type":"raw","value":"<code class=\"language-text\">{}</code>","position":{"start":{"line":276,"column":44,"offset":10653},"end":{"line":276,"column":48,"offset":10657}}},{"type":"text","value":", as in conditionals or ","position":{"start":{"line":276,"column":48,"offset":10657},"end":{"line":276,"column":72,"offset":10681}}},{"type":"raw","value":"<code class=\"language-text\">for</code>","position":{"start":{"line":276,"column":72,"offset":10681},"end":{"line":276,"column":77,"offset":10686}}},{"type":"text","value":" loops","position":{"start":{"line":276,"column":77,"offset":10686},"end":{"line":276,"column":83,"offset":10692}}},{"type":"text","value":")","position":{"start":{"line":276,"column":83,"offset":10692},"end":{"line":276,"column":85,"offset":10694}}},{"type":"text","value":", variables can be block scoped","position":{"start":{"line":276,"column":85,"offset":10694},"end":{"line":276,"column":116,"offset":10725}}}],"position":{"start":{"line":276,"column":5,"offset":10614},"end":{"line":276,"column":116,"offset":10725}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"inner scope does not have access to variables in the outer scope","position":{"start":{"line":277,"column":7,"offset":10733},"end":{"line":277,"column":71,"offset":10797}}}],"position":{"start":{"line":277,"column":7,"offset":10733},"end":{"line":277,"column":71,"offset":10797}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"scope chaining—if a given variable is not found in immediate scope, javascript will search all accessible outer scopes until variable is found","position":{"start":{"line":278,"column":11,"offset":10809},"end":{"line":278,"column":153,"offset":10951}}}],"position":{"start":{"line":278,"column":9,"offset":10807},"end":{"line":278,"column":153,"offset":10951}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"so an inner scope can access outer scope variables","position":{"start":{"line":279,"column":11,"offset":10963},"end":{"line":279,"column":61,"offset":11013}}}],"position":{"start":{"line":279,"column":9,"offset":10961},"end":{"line":279,"column":61,"offset":11013}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"but an outer scope can never access inner scope variables","position":{"start":{"line":280,"column":11,"offset":11025},"end":{"line":280,"column":68,"offset":11082}}}],"position":{"start":{"line":280,"column":9,"offset":11023},"end":{"line":280,"column":68,"offset":11082}}},{"type":"text","value":"\n"}],"position":{"start":{"line":278,"column":9,"offset":10807},"end":{"line":280,"column":68,"offset":11082}}},{"type":"text","value":"\n"}],"position":{"start":{"line":277,"column":5,"offset":10731},"end":{"line":280,"column":68,"offset":11082}}},{"type":"text","value":"\n"}],"position":{"start":{"line":270,"column":5,"offset":9985},"end":{"line":280,"column":68,"offset":11082}}},{"type":"text","value":"\n"}],"position":{"start":{"line":269,"column":1,"offset":9870},"end":{"line":280,"column":68,"offset":11082}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define an arrow function","position":{"start":{"line":281,"column":3,"offset":11086},"end":{"line":281,"column":27,"offset":11110}}}],"position":{"start":{"line":281,"column":3,"offset":11086},"end":{"line":281,"column":27,"offset":11110}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"`","position":{"start":{"line":283,"column":5,"offset":11118},"end":{"line":283,"column":7,"offset":11120}}},{"type":"text","value":"`","position":{"start":{"line":283,"column":7,"offset":11120},"end":{"line":283,"column":9,"offset":11122}}},{"type":"text","value":"`","position":{"start":{"line":283,"column":9,"offset":11122},"end":{"line":283,"column":11,"offset":11124}}},{"type":"text","value":"javascript","position":{"start":{"line":283,"column":11,"offset":11124},"end":{"line":283,"column":21,"offset":11134}}}],"position":{"start":{"line":283,"column":5,"offset":11118},"end":{"line":283,"column":21,"offset":11134}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"let arrowFunction = ","position":{"start":{"line":285,"column":5,"offset":11142},"end":{"line":285,"column":25,"offset":11162}}},{"type":"text","value":"(","position":{"start":{"line":285,"column":25,"offset":11162},"end":{"line":285,"column":27,"offset":11164}}},{"type":"text","value":"param1, param2","position":{"start":{"line":285,"column":27,"offset":11164},"end":{"line":285,"column":41,"offset":11178}}},{"type":"text","value":")","position":{"start":{"line":285,"column":41,"offset":11178},"end":{"line":285,"column":43,"offset":11180}}},{"type":"text","value":" =","position":{"start":{"line":285,"column":43,"offset":11180},"end":{"line":285,"column":45,"offset":11182}}},{"type":"text","value":">","position":{"start":{"line":285,"column":45,"offset":11182},"end":{"line":285,"column":49,"offset":11186}}},{"type":"text","value":" {","position":{"start":{"line":285,"column":49,"offset":11186},"end":{"line":285,"column":51,"offset":11188}}}],"position":{"start":{"line":285,"column":5,"offset":11142},"end":{"line":285,"column":51,"offset":11188}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"let sum = param1 + param2;","position":{"start":{"line":287,"column":5,"offset":11196},"end":{"line":287,"column":31,"offset":11222}}}],"position":{"start":{"line":287,"column":5,"offset":11196},"end":{"line":287,"column":31,"offset":11222}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"return sum;","position":{"start":{"line":289,"column":5,"offset":11230},"end":{"line":289,"column":16,"offset":11241}}}],"position":{"start":{"line":289,"column":5,"offset":11230},"end":{"line":289,"column":16,"offset":11241}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"}","position":{"start":{"line":291,"column":5,"offset":11249},"end":{"line":291,"column":6,"offset":11250}}}],"position":{"start":{"line":291,"column":5,"offset":11249},"end":{"line":291,"column":6,"offset":11250}}},{"type":"text","value":"\n"}],"position":{"start":{"line":281,"column":1,"offset":11084},"end":{"line":291,"column":6,"offset":11250}}},{"type":"text","value":"\n"}],"position":{"start":{"line":255,"column":1,"offset":8194},"end":{"line":291,"column":6,"offset":11250}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"// with 1 param you can remove parens around parameters let arrowFunction = param =","position":{"start":{"line":293,"column":1,"offset":11254},"end":{"line":293,"column":84,"offset":11337}}},{"type":"text","value":">","position":{"start":{"line":293,"column":84,"offset":11337},"end":{"line":293,"column":88,"offset":11341}}},{"type":"text","value":" { param += 1; return param; }","position":{"start":{"line":293,"column":88,"offset":11341},"end":{"line":293,"column":118,"offset":11371}}}],"position":{"start":{"line":293,"column":1,"offset":11254},"end":{"line":293,"column":118,"offset":11371}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"// if your return statement is one line, you can use implied return let arrowFunction = param =","position":{"start":{"line":295,"column":1,"offset":11375},"end":{"line":295,"column":96,"offset":11470}}},{"type":"text","value":">","position":{"start":{"line":295,"column":96,"offset":11470},"end":{"line":295,"column":100,"offset":11474}}},{"type":"text","value":" param + 1;","position":{"start":{"line":295,"column":100,"offset":11474},"end":{"line":295,"column":111,"offset":11485}}}],"position":{"start":{"line":295,"column":1,"offset":11375},"end":{"line":295,"column":111,"offset":11485}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"// you don't have to assign to variable, can be anonymous // if you never need to use it again param =","position":{"start":{"line":297,"column":1,"offset":11489},"end":{"line":297,"column":103,"offset":11591}}},{"type":"text","value":">","position":{"start":{"line":297,"column":103,"offset":11591},"end":{"line":297,"column":107,"offset":11595}}},{"type":"text","value":" param + 1;","position":{"start":{"line":297,"column":107,"offset":11595},"end":{"line":297,"column":118,"offset":11606}}}],"position":{"start":{"line":297,"column":1,"offset":11489},"end":{"line":297,"column":118,"offset":11606}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"`","position":{"start":{"line":299,"column":1,"offset":11610},"end":{"line":299,"column":3,"offset":11612}}},{"type":"text","value":"`","position":{"start":{"line":299,"column":3,"offset":11612},"end":{"line":299,"column":5,"offset":11614}}},{"type":"text","value":"`","position":{"start":{"line":299,"column":5,"offset":11614},"end":{"line":299,"column":7,"offset":11616}}}],"position":{"start":{"line":299,"column":1,"offset":11610},"end":{"line":299,"column":7,"offset":11616}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given an arrow function, deduce the value of ","position":{"start":{"line":301,"column":3,"offset":11622},"end":{"line":301,"column":48,"offset":11667}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":301,"column":48,"offset":11667},"end":{"line":301,"column":54,"offset":11673}}},{"type":"text","value":" without executing the code","position":{"start":{"line":301,"column":54,"offset":11673},"end":{"line":301,"column":81,"offset":11700}}}],"position":{"start":{"line":301,"column":3,"offset":11622},"end":{"line":301,"column":81,"offset":11700}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"arrow functions are automatically bound to the context they were declared in","position":{"start":{"line":303,"column":7,"offset":11710},"end":{"line":303,"column":83,"offset":11786}}}],"position":{"start":{"line":303,"column":5,"offset":11708},"end":{"line":303,"column":83,"offset":11786}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"unlike regular function which use the context they are invoked in ","position":{"start":{"line":304,"column":7,"offset":11794},"end":{"line":304,"column":73,"offset":11860}}},{"type":"text","value":"(","position":{"start":{"line":304,"column":73,"offset":11860},"end":{"line":304,"column":75,"offset":11862}}},{"type":"text","value":"unless they have been bound using ","position":{"start":{"line":304,"column":75,"offset":11862},"end":{"line":304,"column":109,"offset":11896}}},{"type":"raw","value":"<code class=\"language-text\">Function#bind</code>","position":{"start":{"line":304,"column":109,"offset":11896},"end":{"line":304,"column":124,"offset":11911}}},{"type":"text","value":")","position":{"start":{"line":304,"column":124,"offset":11911},"end":{"line":304,"column":126,"offset":11913}}}],"position":{"start":{"line":304,"column":5,"offset":11792},"end":{"line":304,"column":126,"offset":11913}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"if you implement an arrow function as a method in an object the context it will be bound to is NOT the object itself, but the global context","position":{"start":{"line":305,"column":7,"offset":11921},"end":{"line":305,"column":147,"offset":12061}}}],"position":{"start":{"line":305,"column":5,"offset":11919},"end":{"line":305,"column":147,"offset":12061}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"so you can't use an arrow function to define a method directly","position":{"start":{"line":306,"column":7,"offset":12069},"end":{"line":306,"column":69,"offset":12131}}}],"position":{"start":{"line":306,"column":7,"offset":12069},"end":{"line":306,"column":69,"offset":12131}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"`","position":{"start":{"line":308,"column":9,"offset":12143},"end":{"line":308,"column":11,"offset":12145}}},{"type":"text","value":"`","position":{"start":{"line":308,"column":11,"offset":12145},"end":{"line":308,"column":13,"offset":12147}}},{"type":"text","value":"`","position":{"start":{"line":308,"column":13,"offset":12147},"end":{"line":308,"column":15,"offset":12149}}},{"type":"text","value":"javascript","position":{"start":{"line":308,"column":15,"offset":12149},"end":{"line":308,"column":25,"offset":12159}}}],"position":{"start":{"line":308,"column":9,"offset":12143},"end":{"line":308,"column":25,"offset":12159}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"let obj = {","position":{"start":{"line":310,"column":9,"offset":12171},"end":{"line":310,"column":20,"offset":12182}}}],"position":{"start":{"line":310,"column":9,"offset":12171},"end":{"line":310,"column":20,"offset":12182}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"name: \"my object\",","position":{"start":{"line":312,"column":9,"offset":12194},"end":{"line":312,"column":27,"offset":12212}}}],"position":{"start":{"line":312,"column":9,"offset":12194},"end":{"line":312,"column":27,"offset":12212}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"unboundFunc: function ","position":{"start":{"line":314,"column":9,"offset":12224},"end":{"line":314,"column":31,"offset":12246}}},{"type":"text","value":"(","position":{"start":{"line":314,"column":31,"offset":12246},"end":{"line":314,"column":33,"offset":12248}}},{"type":"text","value":")","position":{"start":{"line":314,"column":33,"offset":12248},"end":{"line":314,"column":35,"offset":12250}}},{"type":"text","value":" {","position":{"start":{"line":314,"column":35,"offset":12250},"end":{"line":314,"column":37,"offset":12252}}}],"position":{"start":{"line":314,"column":9,"offset":12224},"end":{"line":314,"column":37,"offset":12252}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"return this.name;","position":{"start":{"line":316,"column":9,"offset":12264},"end":{"line":316,"column":26,"offset":12281}}}],"position":{"start":{"line":316,"column":9,"offset":12264},"end":{"line":316,"column":26,"offset":12281}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"// this function will be able to be called on different objects","position":{"start":{"line":318,"column":9,"offset":12293},"end":{"line":318,"column":72,"offset":12356}}}],"position":{"start":{"line":318,"column":9,"offset":12293},"end":{"line":318,"column":72,"offset":12356}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"},","position":{"start":{"line":320,"column":9,"offset":12368},"end":{"line":320,"column":11,"offset":12370}}}],"position":{"start":{"line":320,"column":9,"offset":12368},"end":{"line":320,"column":11,"offset":12370}}},{"type":"text","value":"\n"}],"position":{"start":{"line":306,"column":5,"offset":12067},"end":{"line":320,"column":11,"offset":12370}}},{"type":"text","value":"\n"}],"position":{"start":{"line":303,"column":5,"offset":11708},"end":{"line":320,"column":11,"offset":12370}}},{"type":"text","value":"\n"}],"position":{"start":{"line":301,"column":1,"offset":11620},"end":{"line":320,"column":11,"offset":12370}}},{"type":"text","value":"\n"}],"position":{"start":{"line":301,"column":1,"offset":11620},"end":{"line":320,"column":11,"offset":12370}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[],"position":{"start":{"line":322,"column":1,"offset":12374},"end":{"line":322,"column":4,"offset":12377}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"boundToGlobal: ","position":{"start":{"line":324,"column":1,"offset":12381},"end":{"line":324,"column":16,"offset":12396}}},{"type":"text","value":"(","position":{"start":{"line":324,"column":16,"offset":12396},"end":{"line":324,"column":18,"offset":12398}}},{"type":"text","value":")","position":{"start":{"line":324,"column":18,"offset":12398},"end":{"line":324,"column":20,"offset":12400}}},{"type":"text","value":" =","position":{"start":{"line":324,"column":20,"offset":12400},"end":{"line":324,"column":22,"offset":12402}}},{"type":"text","value":">","position":{"start":{"line":324,"column":22,"offset":12402},"end":{"line":324,"column":26,"offset":12406}}},{"type":"text","value":" { return this.name; // this function, no matter how you call it, will be called // on the global object, and it cannot be rebound // this is because it was defined using arrow syntax },","position":{"start":{"line":324,"column":26,"offset":12406},"end":{"line":324,"column":212,"offset":12592}}}],"position":{"start":{"line":324,"column":1,"offset":12381},"end":{"line":324,"column":212,"offset":12592}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token function-variable function\">makeFuncBoundToObj</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// this function will return a function that will be bound</span>\n    <span class=\"token comment\">// to the object where we call the outer method</span>\n    <span class=\"token comment\">// because the arrow syntax is nested inside one of this</span>\n    <span class=\"token comment\">// function's methods, it cannot be rebound</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token function-variable function\">makeUnboundFunc</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//this function will return a function that will still be unbound</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token function-variable function\">immediatelyInvokedFunc</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// this property will be set to the return value of this anonymous function,</span>\n<span class=\"token comment\">// which is invoked during the object definition;</span>\n<span class=\"token comment\">// basically, it's a way to check the context inside of an object, at this moment</span>\n\n<span class=\"token literal-property property\">innerObj</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"inner object\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">innerArrowFunc</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>  <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token comment\">// the context inside a nested object is not the parent, it's still</span>\n    <span class=\"token comment\">// the global object. entering an object definition doesn't change the context</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token keyword\">let</span> otherObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"my other object\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// call unboundFunc on obj, we get \"my object\" console.log(\"unboundFunc: \", obj.unboundFunc()); // => \"my object\" // assign unboundFunc to a variable and call it let newFunc = obj.unboundFunc; // this newFunc will default to being called on global object console.log(\"newFunc: \",newFunc()); // => undefined // but you could bind it directly to a different object if you wanted console.log(\"newFunc: \", newFunc.bind(otherObj)()); // \"my other object\"</span>\n<span class=\"token comment\">// meanwhile, obj.boundToGlobal will only ever be called on global object console.log(\"boundToGlobal: \", obj.boundToGlobal()); //=> undefined let newBoundFunc = obj.boundToGlobal; console.log(\"newBoundFunc: \", newBoundFunc()); // => undefined // even if you try to directly bind to another object, it won't work! console.log(\"newBoundFunc: \", newBoundFunc.bind(otherObj)()); // => undefined</span>\n<span class=\"token comment\">// let's make a new function that will always be bound to the context // where we call our function maker let boundFunc = obj.makeFuncBoundToObj();// note that we're invoking, not just assigning console.log(\"boundFunc: \", boundFunc()); // => \"my object\" // we can't rebind this function console.log(\"boundFunc: \", boundFunc.bind(otherObj)()) // =>\"my object\"</span>\n<span class=\"token comment\">// but if I call makeFuncBoundToObj on another context // the new bound function is stuck with that other context let boundToOther = obj.makeFuncBoundToObj.bind(otherObj)(); console.log(\"boundToOther: \", boundToOther()); // => \"my other object\" console.log(\"boundToOther: \", boundToOther.bind(obj)()) // \"my other object\"</span>\n<span class=\"token comment\">// the return value of my immediately invoked function // shows that the context inside of the object is the // global object, not the object itself // context only changes inside a function that is called // on an object console.log(\"immediatelyInvokedFunc: \", obj.immediatelyInvokedFunc); // => undefined</span>\n<span class=\"token comment\">// even though we're inside a nested object, the context is // still the same as it was outside the outer object // in this case, the global object console.log(\"innerArrowFunc: \", obj.innerObj.innerArrowFunc()); // => undefined</span></code></pre></div>","position":{"start":{"line":326,"column":1,"offset":12596},"end":{"line":366,"column":4,"offset":15752}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"}","position":{"start":{"line":368,"column":1,"offset":15756},"end":{"line":368,"column":2,"offset":15757}}}],"position":{"start":{"line":368,"column":1,"offset":15756},"end":{"line":368,"column":2,"offset":15757}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token operator\">-</span> Implement a closure and explain how the closure effects scope\n   <span class=\"token operator\">-</span> a closure is <span class=\"token string\">\"the combination of a function and the lexical environment within which that function was declared\"</span>\n      <span class=\"token operator\">-</span> alternatively<span class=\"token punctuation\">,</span> <span class=\"token string\">\"when an inner function uses or changes variables in an outer function\"</span>\n   <span class=\"token operator\">-</span> closures have access to any variables within their own scope <span class=\"token operator\">+</span> scope <span class=\"token keyword\">of</span> outer functions <span class=\"token operator\">+</span> global scope — the <span class=\"token keyword\">set</span> <span class=\"token keyword\">of</span> all these available variables is <span class=\"token string\">\"lexical environemnt\"</span>\n   <span class=\"token operator\">-</span> closure keeps reference to all variables <span class=\"token operator\">**</span>even <span class=\"token keyword\">if</span> the outer <span class=\"token keyword\">function</span> has returned<span class=\"token operator\">**</span>\n      <span class=\"token operator\">-</span> each <span class=\"token keyword\">function</span> has a <span class=\"token keyword\">private</span> mutable state that cannot be accessed externally\n      <span class=\"token operator\">-</span> the inner <span class=\"token keyword\">function</span> will maintain a reference to the scope <span class=\"token keyword\">in</span> which it was declared<span class=\"token punctuation\">.</span> so it has access to variables that were initialized <span class=\"token keyword\">in</span> any outer scope—even <span class=\"token keyword\">if</span> that scope\n      <span class=\"token operator\">-</span> <span class=\"token keyword\">if</span> a variable exists <span class=\"token keyword\">in</span> the scope <span class=\"token keyword\">of</span> what could have been accessed by a <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">.</span> global scope<span class=\"token punctuation\">,</span> outer <span class=\"token keyword\">function</span><span class=\"token punctuation\">,</span> etc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> does that variable wind up <span class=\"token keyword\">in</span> the closure even <span class=\"token keyword\">if</span> it never got accessed<span class=\"token operator\">?</span>\n      <span class=\"token operator\">-</span> <span class=\"token keyword\">if</span> you change the value <span class=\"token keyword\">of</span> a <span class=\"token function\">variable</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">.</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> you will change the value <span class=\"token keyword\">of</span> that variable <span class=\"token keyword\">in</span> the scope that it was declared <span class=\"token keyword\">in</span>\n\n<span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n\n\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>`js\n<span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// this function starts a counter at 0, then returns a</span>\n   <span class=\"token comment\">// new function that can access and change that counter</span>\n   <span class=\"token comment\">//</span>\n   <span class=\"token comment\">// each new counter you create will have a single internal</span>\n   <span class=\"token comment\">// state, that can be changed only by calling the function.</span>\n   <span class=\"token comment\">// you can't access that state from outside of the function,</span>\n   <span class=\"token comment\">// even though the count variable in question is initialized</span>\n   <span class=\"token comment\">// by the outer function, and it remains accessible to the</span>\n   <span class=\"token comment\">// inner function after the outer function returns.</span>\n   <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      count <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">createCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 2</span>\n<span class=\"token comment\">// so the closure here comes into play because</span>\n<span class=\"token comment\">// an inner function is accessing and changing</span>\n<span class=\"token comment\">// a variable from an outer function</span>\n\n<span class=\"token comment\">// the closure is the combination of the counter</span>\n<span class=\"token comment\">// function and the all the variables that existed</span>\n<span class=\"token comment\">// in the scope that it was declared in. because</span>\n<span class=\"token comment\">// inner blocks/functions have access to outer</span>\n<span class=\"token comment\">// scopes, that includes the scope of the outer</span>\n<span class=\"token comment\">// function.</span>\n\n<span class=\"token comment\">// so counter variable is a closure, in that</span>\n<span class=\"token comment\">// it contains the inner count value that was</span>\n<span class=\"token comment\">// initialized by the outer createCounter() function</span>\n<span class=\"token comment\">// count has been captured or closed over</span>\n\n<span class=\"token comment\">// this state is private, so if i run createCounter again</span>\n<span class=\"token comment\">// i get a totally separate count that doesn't interact</span>\n<span class=\"token comment\">// with the previous one and each of the new functions</span>\n<span class=\"token comment\">// will have their own internal state based on the</span>\n<span class=\"token comment\">// initial declaration in the now-closed outer function</span>\n\n<span class=\"token keyword\">let</span> counter2 <span class=\"token operator\">=</span> <span class=\"token function\">createCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">counter2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 1</span>\n\n<span class=\"token comment\">// if i set a new function equal to my existing counter</span>\n<span class=\"token comment\">// the internal state is shared with the new function</span>\n<span class=\"token keyword\">let</span> counter3 <span class=\"token operator\">=</span> counter2<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">counter3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":370,"column":1,"offset":15761},"end":{"line":438,"column":4,"offset":18788}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define a method that references ","position":{"start":{"line":440,"column":3,"offset":18794},"end":{"line":440,"column":35,"offset":18826}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":440,"column":35,"offset":18826},"end":{"line":440,"column":41,"offset":18832}}},{"type":"text","value":" on an object literal","position":{"start":{"line":440,"column":41,"offset":18832},"end":{"line":440,"column":62,"offset":18853}}}],"position":{"start":{"line":440,"column":3,"offset":18794},"end":{"line":440,"column":62,"offset":18853}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"when we use ","position":{"start":{"line":441,"column":7,"offset":18861},"end":{"line":441,"column":19,"offset":18873}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":441,"column":19,"offset":18873},"end":{"line":441,"column":25,"offset":18879}}},{"type":"text","value":" in a method it refers to the object that the method is invoked on","position":{"start":{"line":441,"column":25,"offset":18879},"end":{"line":441,"column":91,"offset":18945}}}],"position":{"start":{"line":441,"column":7,"offset":18861},"end":{"line":441,"column":91,"offset":18945}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"it will let you access other pieces of information from within that object, or even other methods","position":{"start":{"line":442,"column":11,"offset":18957},"end":{"line":442,"column":108,"offset":19054}}}],"position":{"start":{"line":442,"column":9,"offset":18955},"end":{"line":442,"column":108,"offset":19054}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"method style invocation - ","position":{"start":{"line":443,"column":11,"offset":19066},"end":{"line":443,"column":37,"offset":19092}}},{"type":"raw","value":"<code class=\"language-text\">object.method(args)</code>","position":{"start":{"line":443,"column":37,"offset":19092},"end":{"line":443,"column":58,"offset":19113}}},{"type":"text","value":" ","position":{"start":{"line":443,"column":58,"offset":19113},"end":{"line":443,"column":59,"offset":19114}}},{"type":"text","value":"(","position":{"start":{"line":443,"column":59,"offset":19114},"end":{"line":443,"column":61,"offset":19116}}},{"type":"text","value":"e.g. built in examples like ","position":{"start":{"line":443,"column":61,"offset":19116},"end":{"line":443,"column":89,"offset":19144}}},{"type":"raw","value":"<code class=\"language-text\">Array#push</code>","position":{"start":{"line":443,"column":89,"offset":19144},"end":{"line":443,"column":101,"offset":19156}}},{"type":"text","value":", or ","position":{"start":{"line":443,"column":101,"offset":19156},"end":{"line":443,"column":106,"offset":19161}}},{"type":"raw","value":"<code class=\"language-text\">String#toUpperCase</code>","position":{"start":{"line":443,"column":106,"offset":19161},"end":{"line":443,"column":126,"offset":19181}}},{"type":"text","value":")","position":{"start":{"line":443,"column":126,"offset":19181},"end":{"line":443,"column":128,"offset":19183}}}],"position":{"start":{"line":443,"column":9,"offset":19064},"end":{"line":443,"column":128,"offset":19183}}},{"type":"text","value":"\n"}],"position":{"start":{"line":442,"column":9,"offset":18955},"end":{"line":443,"column":128,"offset":19183}}},{"type":"text","value":"\n"}],"position":{"start":{"line":441,"column":5,"offset":18859},"end":{"line":443,"column":128,"offset":19183}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"context is set every time we invoke a function","position":{"start":{"line":444,"column":7,"offset":19191},"end":{"line":444,"column":53,"offset":19237}}}],"position":{"start":{"line":444,"column":5,"offset":19189},"end":{"line":444,"column":53,"offset":19237}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"function style invocation sets the context to the global object no matter what","position":{"start":{"line":445,"column":7,"offset":19245},"end":{"line":445,"column":85,"offset":19323}}}],"position":{"start":{"line":445,"column":5,"offset":19243},"end":{"line":445,"column":85,"offset":19323}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"being inside an object does not make the context that object! you still have to use method-style invocation","position":{"start":{"line":446,"column":7,"offset":19331},"end":{"line":446,"column":114,"offset":19438}}}],"position":{"start":{"line":446,"column":5,"offset":19329},"end":{"line":446,"column":114,"offset":19438}}},{"type":"text","value":"\n"}],"position":{"start":{"line":441,"column":5,"offset":18859},"end":{"line":446,"column":114,"offset":19438}}},{"type":"text","value":"\n"}],"position":{"start":{"line":440,"column":1,"offset":18792},"end":{"line":446,"column":114,"offset":19438}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Utilize the built in ","position":{"start":{"line":447,"column":3,"offset":19442},"end":{"line":447,"column":24,"offset":19463}}},{"type":"raw","value":"<code class=\"language-text\">Function#bind</code>","position":{"start":{"line":447,"column":24,"offset":19463},"end":{"line":447,"column":39,"offset":19478}}},{"type":"text","value":" on a callback to maintain the context of this","position":{"start":{"line":447,"column":39,"offset":19478},"end":{"line":447,"column":85,"offset":19524}}}],"position":{"start":{"line":447,"column":3,"offset":19442},"end":{"line":447,"column":85,"offset":19524}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"when we call bind on a function, we get an exotic function back—so the context will always be the same for that new function","position":{"start":{"line":449,"column":7,"offset":19534},"end":{"line":449,"column":131,"offset":19658}}}],"position":{"start":{"line":449,"column":5,"offset":19532},"end":{"line":449,"column":131,"offset":19658}}},{"type":"text","value":"\n"}],"position":{"start":{"line":449,"column":5,"offset":19532},"end":{"line":449,"column":131,"offset":19658}}},{"type":"text","value":"\n"}],"position":{"start":{"line":447,"column":1,"offset":19440},"end":{"line":449,"column":131,"offset":19658}}},{"type":"text","value":"\n"}],"position":{"start":{"line":440,"column":1,"offset":18792},"end":{"line":449,"column":131,"offset":19658}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   let cat = {\n   purr: function () {\n   console.log(\"meow\");\n   },\n   purrMore: function () {\n   this.purr();\n   },\n   };\n   let sayMeow = cat.purrMore; console.log(sayMeow()); // TypeError: this.purr is not a function\n\n   // we can use the built in Function.bind to ensure our context, our this, // is the cat object let boundCat = sayMeow.bind(cat);\n   boundCat(); // prints \"meow\"</code></pre></div>","position":{"start":{"line":451,"column":1,"offset":19662},"end":{"line":464,"column":5,"offset":20084}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\\`\\`</code></pre></div>","position":{"start":{"line":466,"column":1,"offset":20088},"end":{"line":466,"column":9,"offset":20096}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[],"position":{"start":{"line":468,"column":1,"offset":20100},"end":{"line":468,"column":4,"offset":20103}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[],"position":{"start":{"line":470,"column":1,"offset":20107},"end":{"line":470,"column":4,"offset":20110}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n   <span class=\"token operator\">-</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">bind</span><span class=\"token template-punctuation string\">`</span></span> can also work <span class=\"token keyword\">with</span> arguments<span class=\"token punctuation\">,</span> so you can have a version <span class=\"token keyword\">of</span> a <span class=\"token keyword\">function</span> <span class=\"token keyword\">with</span> particular arguments and a particular context<span class=\"token punctuation\">.</span> the first arg will be the context aka the <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this</span><span class=\"token template-punctuation string\">`</span></span> you want it to use<span class=\"token punctuation\">.</span> the next arguments will be the functions arguments that you are binding\n      <span class=\"token operator\">-</span> <span class=\"token keyword\">if</span> you just want to bind it to those arguments <span class=\"token keyword\">in</span> particular<span class=\"token punctuation\">,</span> you can use <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">null</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token keyword\">as</span> the first argument<span class=\"token punctuation\">,</span> so the context won't be bound<span class=\"token punctuation\">,</span> just the arguments\n<span class=\"token operator\">-</span> Given a code snippet<span class=\"token punctuation\">,</span> identify what <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this</span><span class=\"token template-punctuation string\">`</span></span> refers to\n   <span class=\"token operator\">-</span> important to recognize the difference between scope and context\n      <span class=\"token operator\">-</span> scope works like a dictionary that has all the variables that are available within a given block<span class=\"token punctuation\">,</span> plus a pointer back the next outer <span class=\"token function\">scope</span> <span class=\"token punctuation\">(</span>which itself has pointers to <span class=\"token keyword\">new</span> <span class=\"token class-name\">scopes</span> until you reach the global scope<span class=\"token punctuation\">.</span> so you can think about a whole given block's scope <span class=\"token keyword\">as</span> a kind <span class=\"token keyword\">of</span> linked list <span class=\"token keyword\">of</span> dictionaries<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>also<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span> is not to say that scope is actually implemented <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span> way<span class=\"token punctuation\">,</span> that is just the schema that i can use to understand it<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">-</span> context refers to the value <span class=\"token keyword\">of</span> the <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this</span><span class=\"token template-punctuation string\">`</span></span> keyword\n   <span class=\"token operator\">-</span> the keyword <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this</span><span class=\"token template-punctuation string\">`</span></span> exists <span class=\"token keyword\">in</span> every <span class=\"token keyword\">function</span> and it evaluates to the object that is currently invoking that <span class=\"token keyword\">function</span>\n   <span class=\"token operator\">-</span> so the context is fairly straightforward when we talk about methods being called on specific objects\n   <span class=\"token operator\">-</span> you could<span class=\"token punctuation\">,</span> however<span class=\"token punctuation\">,</span> call an object's method on something other than that object<span class=\"token punctuation\">,</span> and then <span class=\"token keyword\">this</span> would refer to the context where<span class=\"token operator\">/</span>how it was called<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">.</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>`js\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> dog <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bowser\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token function-variable function\">changeName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Layla\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// note this is **not invoked** - we are assigning the function itself</span>\n<span class=\"token keyword\">let</span> change <span class=\"token operator\">=</span> dog<span class=\"token punctuation\">.</span>changeName<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token comment\">// our dog still has the same name</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { name: 'Bowser', changeName: [Function: changeName] }</span>\n\n<span class=\"token comment\">// instead of changing the dog we changed the global name!!!</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Object [global] {etc, etc, etc,  name: 'Layla'}</span></code></pre></div>","position":{"start":{"line":472,"column":1,"offset":20114},"end":{"line":501,"column":4,"offset":22089}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"CALLING SOMETHING IN THE WRONG CONTEXT CAN MESS YOU UP!","position":{"start":{"line":503,"column":3,"offset":22095},"end":{"line":503,"column":58,"offset":22150}}}],"position":{"start":{"line":503,"column":3,"offset":22095},"end":{"line":503,"column":58,"offset":22150}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"could throw an error if it expects this to have some other method or whatever that doesn't exist","position":{"start":{"line":504,"column":7,"offset":22158},"end":{"line":504,"column":103,"offset":22254}}}],"position":{"start":{"line":504,"column":5,"offset":22156},"end":{"line":504,"column":103,"offset":22254}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"you could also overwrite values or assign values to exist in a space where they should not exist","position":{"start":{"line":505,"column":7,"offset":22262},"end":{"line":505,"column":103,"offset":22358}}}],"position":{"start":{"line":505,"column":5,"offset":22260},"end":{"line":505,"column":103,"offset":22358}}},{"type":"text","value":"\n"}],"position":{"start":{"line":504,"column":5,"offset":22156},"end":{"line":505,"column":103,"offset":22358}}},{"type":"text","value":"\n"}],"position":{"start":{"line":503,"column":1,"offset":22093},"end":{"line":505,"column":103,"offset":22358}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"if you call a function as a callback, it will set ","position":{"start":{"line":506,"column":3,"offset":22362},"end":{"line":506,"column":53,"offset":22412}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":506,"column":53,"offset":22412},"end":{"line":506,"column":59,"offset":22418}}},{"type":"text","value":" to be the outer function itself, even if the function you were calling is a method that was called on a particular object","position":{"start":{"line":506,"column":59,"offset":22418},"end":{"line":506,"column":181,"offset":22540}}}],"position":{"start":{"line":506,"column":1,"offset":22360},"end":{"line":506,"column":181,"offset":22540}}},{"type":"text","value":"\n"}],"position":{"start":{"line":503,"column":1,"offset":22093},"end":{"line":506,"column":181,"offset":22540}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   let cat = {\n   purr: function () {\n   console.log(\"meow\");\n   },\n   purrMore: function () {\n   this.purr();\n   },\n   };\n   global.setTimeout(cat.purrMore, 5000); // 5 seconds later: TypeError: this.purr is not a function</code></pre></div>","position":{"start":{"line":508,"column":1,"offset":22544},"end":{"line":518,"column":5,"offset":22800}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"we can use strict mode with ","position":{"start":{"line":520,"column":1,"offset":22804},"end":{"line":520,"column":29,"offset":22832}}},{"type":"raw","value":"<code class=\"language-text\">\"use strict\";</code>","position":{"start":{"line":520,"column":29,"offset":22832},"end":{"line":520,"column":44,"offset":22847}}},{"type":"text","value":" this will prevent you from accessing the global object with ","position":{"start":{"line":520,"column":44,"offset":22847},"end":{"line":520,"column":105,"offset":22908}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":520,"column":105,"offset":22908},"end":{"line":520,"column":111,"offset":22914}}},{"type":"text","value":" in functions, so if you try to call ","position":{"start":{"line":520,"column":111,"offset":22914},"end":{"line":520,"column":148,"offset":22951}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":520,"column":148,"offset":22951},"end":{"line":520,"column":154,"offset":22957}}},{"type":"text","value":" in the global context and change a value, you will get a type error, and the things you try to access will be undefined","position":{"start":{"line":520,"column":154,"offset":22957},"end":{"line":520,"column":274,"offset":23077}}}],"position":{"start":{"line":520,"column":1,"offset":22804},"end":{"line":520,"column":274,"offset":23077}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[],"position":{"start":{"line":522,"column":1,"offset":23081},"end":{"line":522,"column":4,"offset":23084}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"let sayMeow = cat.purrMore; console.log","position":{"start":{"line":524,"column":1,"offset":23088},"end":{"line":524,"column":40,"offset":23127}}},{"type":"text","value":"(","position":{"start":{"line":524,"column":40,"offset":23127},"end":{"line":524,"column":42,"offset":23129}}},{"type":"text","value":"sayMeow","position":{"start":{"line":524,"column":42,"offset":23129},"end":{"line":524,"column":49,"offset":23136}}},{"type":"text","value":"(","position":{"start":{"line":524,"column":49,"offset":23136},"end":{"line":524,"column":51,"offset":23138}}},{"type":"text","value":")","position":{"start":{"line":524,"column":51,"offset":23138},"end":{"line":524,"column":53,"offset":23140}}},{"type":"text","value":")","position":{"start":{"line":524,"column":53,"offset":23140},"end":{"line":524,"column":55,"offset":23142}}},{"type":"text","value":"; // TypeError: this.purr is not a function","position":{"start":{"line":524,"column":55,"offset":23142},"end":{"line":524,"column":98,"offset":23185}}}],"position":{"start":{"line":524,"column":1,"offset":23088},"end":{"line":524,"column":98,"offset":23185}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"// we can use the built in Function.bind to ensure our context, our ","position":{"start":{"line":526,"column":1,"offset":23189},"end":{"line":526,"column":69,"offset":23257}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":526,"column":69,"offset":23257},"end":{"line":526,"column":75,"offset":23263}}},{"type":"text","value":", // is the cat object let boundCat = sayMeow.bind","position":{"start":{"line":526,"column":75,"offset":23263},"end":{"line":526,"column":125,"offset":23313}}},{"type":"text","value":"(","position":{"start":{"line":526,"column":125,"offset":23313},"end":{"line":526,"column":127,"offset":23315}}},{"type":"text","value":"cat","position":{"start":{"line":526,"column":127,"offset":23315},"end":{"line":526,"column":130,"offset":23318}}},{"type":"text","value":")","position":{"start":{"line":526,"column":130,"offset":23318},"end":{"line":526,"column":132,"offset":23320}}},{"type":"text","value":";","position":{"start":{"line":526,"column":132,"offset":23320},"end":{"line":526,"column":133,"offset":23321}}}],"position":{"start":{"line":526,"column":1,"offset":23189},"end":{"line":526,"column":133,"offset":23321}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"boundCat","position":{"start":{"line":528,"column":1,"offset":23325},"end":{"line":528,"column":9,"offset":23333}}},{"type":"text","value":"(","position":{"start":{"line":528,"column":9,"offset":23333},"end":{"line":528,"column":11,"offset":23335}}},{"type":"text","value":")","position":{"start":{"line":528,"column":11,"offset":23335},"end":{"line":528,"column":13,"offset":23337}}},{"type":"text","value":"; // prints \"meow\"","position":{"start":{"line":528,"column":13,"offset":23337},"end":{"line":528,"column":31,"offset":23355}}}],"position":{"start":{"line":528,"column":1,"offset":23325},"end":{"line":528,"column":31,"offset":23355}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   - `bind` can also work with arguments, so you can have a version of a function with particular arguments and a particular context. the first arg will be the context aka the `this` you want it to use. the next arguments will be the functions arguments that you are binding\n      - if you just want to bind it to those arguments in particular, you can use `null` as the first argument, so the context won't be bound, just the arguments\n- Given a code snippet, identify what `this` refers to\n   - important to recognize the difference between scope and context\n      - scope works like a dictionary that has all the variables that are available within a given block, plus a pointer back the next outer scope (which itself has pointers to new scopes until you reach the global scope. so you can think about a whole given block's scope as a kind of linked list of dictionaries) (also, this is not to say that scope is actually implemented in this way, that is just the schema that i can use to understand it)\n      - context refers to the value of the `this` keyword\n   - the keyword `this` exists in every function and it evaluates to the object that is currently invoking that function\n   - so the context is fairly straightforward when we talk about methods being called on specific objects\n   - you could, however, call an object's method on something other than that object, and then this would refer to the context where/how it was called, e.g.\n```js\n//\nlet dog = {\n   name: \"Bowser\",\n   changeName: function () {\n      this.name = \"Layla\";\n  },\n};\n\n// note this is **not invoked** - we are assigning the function itself\nlet change = dog.changeName;\nconsole.log(change()); // undefined\n\n// our dog still has the same name\nconsole.log(dog); // { name: 'Bowser', changeName: [Function: changeName] }\n\n// instead of changing the dog we changed the global name!!!\nconsole.log(this); // Object [global] {etc, etc, etc,  name: 'Layla'}</code></pre></div>","position":{"start":{"line":530,"column":1,"offset":23359},"end":{"line":558,"column":4,"offset":25332}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"CALLING SOMETHING IN THE WRONG CONTEXT CAN MESS YOU UP!","position":{"start":{"line":560,"column":3,"offset":25338},"end":{"line":560,"column":58,"offset":25393}}}],"position":{"start":{"line":560,"column":3,"offset":25338},"end":{"line":560,"column":58,"offset":25393}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"could throw an error if it expects this to have some other method or whatever that doesn't exist","position":{"start":{"line":561,"column":7,"offset":25401},"end":{"line":561,"column":103,"offset":25497}}}],"position":{"start":{"line":561,"column":5,"offset":25399},"end":{"line":561,"column":103,"offset":25497}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"you could also overwrite values or assign values to exist in a space where they should not exist","position":{"start":{"line":562,"column":7,"offset":25505},"end":{"line":562,"column":103,"offset":25601}}}],"position":{"start":{"line":562,"column":5,"offset":25503},"end":{"line":562,"column":103,"offset":25601}}},{"type":"text","value":"\n"}],"position":{"start":{"line":561,"column":5,"offset":25399},"end":{"line":562,"column":103,"offset":25601}}},{"type":"text","value":"\n"}],"position":{"start":{"line":560,"column":1,"offset":25336},"end":{"line":562,"column":103,"offset":25601}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"if you call a function as a callback, it will set ","position":{"start":{"line":563,"column":3,"offset":25605},"end":{"line":563,"column":53,"offset":25655}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":563,"column":53,"offset":25655},"end":{"line":563,"column":59,"offset":25661}}},{"type":"text","value":" to be the outer function itself, even if the function you were calling is a method that was called on a particular object","position":{"start":{"line":563,"column":59,"offset":25661},"end":{"line":563,"column":181,"offset":25783}}}],"position":{"start":{"line":563,"column":3,"offset":25605},"end":{"line":563,"column":181,"offset":25783}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"`","position":{"start":{"line":565,"column":5,"offset":25791},"end":{"line":565,"column":7,"offset":25793}}},{"type":"text","value":"`","position":{"start":{"line":565,"column":7,"offset":25793},"end":{"line":565,"column":9,"offset":25795}}},{"type":"text","value":"`","position":{"start":{"line":565,"column":9,"offset":25795},"end":{"line":565,"column":11,"offset":25797}}},{"type":"text","value":"javascript","position":{"start":{"line":565,"column":11,"offset":25797},"end":{"line":565,"column":21,"offset":25807}}}],"position":{"start":{"line":565,"column":5,"offset":25791},"end":{"line":565,"column":21,"offset":25807}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"let cat = {","position":{"start":{"line":567,"column":5,"offset":25815},"end":{"line":567,"column":16,"offset":25826}}}],"position":{"start":{"line":567,"column":5,"offset":25815},"end":{"line":567,"column":16,"offset":25826}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"purr: function ","position":{"start":{"line":569,"column":5,"offset":25834},"end":{"line":569,"column":20,"offset":25849}}},{"type":"text","value":"(","position":{"start":{"line":569,"column":20,"offset":25849},"end":{"line":569,"column":22,"offset":25851}}},{"type":"text","value":")","position":{"start":{"line":569,"column":22,"offset":25851},"end":{"line":569,"column":24,"offset":25853}}},{"type":"text","value":" {","position":{"start":{"line":569,"column":24,"offset":25853},"end":{"line":569,"column":26,"offset":25855}}}],"position":{"start":{"line":569,"column":5,"offset":25834},"end":{"line":569,"column":26,"offset":25855}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"console.log","position":{"start":{"line":571,"column":5,"offset":25863},"end":{"line":571,"column":16,"offset":25874}}},{"type":"text","value":"(","position":{"start":{"line":571,"column":16,"offset":25874},"end":{"line":571,"column":18,"offset":25876}}},{"type":"text","value":"\"meow\"","position":{"start":{"line":571,"column":18,"offset":25876},"end":{"line":571,"column":24,"offset":25882}}},{"type":"text","value":")","position":{"start":{"line":571,"column":24,"offset":25882},"end":{"line":571,"column":26,"offset":25884}}},{"type":"text","value":";","position":{"start":{"line":571,"column":26,"offset":25884},"end":{"line":571,"column":27,"offset":25885}}}],"position":{"start":{"line":571,"column":5,"offset":25863},"end":{"line":571,"column":27,"offset":25885}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"},","position":{"start":{"line":573,"column":5,"offset":25893},"end":{"line":573,"column":7,"offset":25895}}}],"position":{"start":{"line":573,"column":5,"offset":25893},"end":{"line":573,"column":7,"offset":25895}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"purrMore: function ","position":{"start":{"line":575,"column":5,"offset":25903},"end":{"line":575,"column":24,"offset":25922}}},{"type":"text","value":"(","position":{"start":{"line":575,"column":24,"offset":25922},"end":{"line":575,"column":26,"offset":25924}}},{"type":"text","value":")","position":{"start":{"line":575,"column":26,"offset":25924},"end":{"line":575,"column":28,"offset":25926}}},{"type":"text","value":" {","position":{"start":{"line":575,"column":28,"offset":25926},"end":{"line":575,"column":30,"offset":25928}}}],"position":{"start":{"line":575,"column":5,"offset":25903},"end":{"line":575,"column":30,"offset":25928}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"this.purr","position":{"start":{"line":577,"column":5,"offset":25936},"end":{"line":577,"column":14,"offset":25945}}},{"type":"text","value":"(","position":{"start":{"line":577,"column":14,"offset":25945},"end":{"line":577,"column":16,"offset":25947}}},{"type":"text","value":")","position":{"start":{"line":577,"column":16,"offset":25947},"end":{"line":577,"column":18,"offset":25949}}},{"type":"text","value":";","position":{"start":{"line":577,"column":18,"offset":25949},"end":{"line":577,"column":19,"offset":25950}}}],"position":{"start":{"line":577,"column":5,"offset":25936},"end":{"line":577,"column":19,"offset":25950}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"},","position":{"start":{"line":579,"column":5,"offset":25958},"end":{"line":579,"column":7,"offset":25960}}}],"position":{"start":{"line":579,"column":5,"offset":25958},"end":{"line":579,"column":7,"offset":25960}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"};","position":{"start":{"line":581,"column":5,"offset":25968},"end":{"line":581,"column":7,"offset":25970}}}],"position":{"start":{"line":581,"column":5,"offset":25968},"end":{"line":581,"column":7,"offset":25970}}},{"type":"text","value":"\n"}],"position":{"start":{"line":563,"column":1,"offset":25603},"end":{"line":581,"column":7,"offset":25970}}},{"type":"text","value":"\n"}],"position":{"start":{"line":560,"column":1,"offset":25336},"end":{"line":581,"column":7,"offset":25970}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"global.setTimeout","position":{"start":{"line":583,"column":1,"offset":25974},"end":{"line":583,"column":18,"offset":25991}}},{"type":"text","value":"(","position":{"start":{"line":583,"column":18,"offset":25991},"end":{"line":583,"column":20,"offset":25993}}},{"type":"text","value":"cat.purrMore, 5000","position":{"start":{"line":583,"column":20,"offset":25993},"end":{"line":583,"column":38,"offset":26011}}},{"type":"text","value":")","position":{"start":{"line":583,"column":38,"offset":26011},"end":{"line":583,"column":40,"offset":26013}}},{"type":"text","value":"; // 5 seconds later: TypeError: this.purr is not a function","position":{"start":{"line":583,"column":40,"offset":26013},"end":{"line":583,"column":100,"offset":26073}}}],"position":{"start":{"line":583,"column":1,"offset":25974},"end":{"line":583,"column":100,"offset":26073}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"`","position":{"start":{"line":585,"column":1,"offset":26077},"end":{"line":585,"column":3,"offset":26079}}},{"type":"text","value":"`","position":{"start":{"line":585,"column":3,"offset":26079},"end":{"line":585,"column":5,"offset":26081}}},{"type":"text","value":"`","position":{"start":{"line":585,"column":5,"offset":26081},"end":{"line":585,"column":7,"offset":26083}}}],"position":{"start":{"line":585,"column":1,"offset":26077},"end":{"line":585,"column":7,"offset":26083}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"we can use strict mode with ","position":{"start":{"line":587,"column":3,"offset":26089},"end":{"line":587,"column":31,"offset":26117}}},{"type":"raw","value":"<code class=\"language-text\">\"use strict\";</code>","position":{"start":{"line":587,"column":31,"offset":26117},"end":{"line":587,"column":46,"offset":26132}}},{"type":"text","value":" this will prevent you from accessing the global object with ","position":{"start":{"line":587,"column":46,"offset":26132},"end":{"line":587,"column":107,"offset":26193}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":587,"column":107,"offset":26193},"end":{"line":587,"column":113,"offset":26199}}},{"type":"text","value":" in functions, so if you try to call ","position":{"start":{"line":587,"column":113,"offset":26199},"end":{"line":587,"column":150,"offset":26236}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":587,"column":150,"offset":26236},"end":{"line":587,"column":156,"offset":26242}}},{"type":"text","value":" in the global context and change a value, you will get a type error, and the things you try to access will be undefined","position":{"start":{"line":587,"column":156,"offset":26242},"end":{"line":587,"column":276,"offset":26362}}}],"position":{"start":{"line":587,"column":1,"offset":26087},"end":{"line":587,"column":276,"offset":26362}}},{"type":"text","value":"\n"}],"position":{"start":{"line":587,"column":1,"offset":26087},"end":{"line":587,"column":276,"offset":26362}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"POJOs","position":{"start":{"line":589,"column":5,"offset":26370},"end":{"line":589,"column":10,"offset":26375}}}],"position":{"start":{"line":589,"column":1,"offset":26366},"end":{"line":589,"column":10,"offset":26375}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"1. Label variables as either Primitive vs. Reference","position":{"start":{"line":591,"column":6,"offset":26384},"end":{"line":591,"column":58,"offset":26436}}}],"position":{"start":{"line":591,"column":1,"offset":26379},"end":{"line":591,"column":58,"offset":26436}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Javascript considers most data types to be 'primitive', these data types are immutable, and are passed by value. The more complex data types: Array and Object are mutable, are considered 'reference' data types, and are passed by reference.","position":{"start":{"line":593,"column":1,"offset":26440},"end":{"line":593,"column":240,"offset":26679}}}],"position":{"start":{"line":593,"column":1,"offset":26440},"end":{"line":593,"column":240,"offset":26679}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Boolean - Primitive","position":{"start":{"line":595,"column":3,"offset":26685},"end":{"line":595,"column":22,"offset":26704}}}],"position":{"start":{"line":595,"column":1,"offset":26683},"end":{"line":595,"column":22,"offset":26704}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Null - Primitive","position":{"start":{"line":596,"column":3,"offset":26708},"end":{"line":596,"column":19,"offset":26724}}}],"position":{"start":{"line":596,"column":1,"offset":26706},"end":{"line":596,"column":19,"offset":26724}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Undefined - Primitive","position":{"start":{"line":597,"column":3,"offset":26728},"end":{"line":597,"column":24,"offset":26749}}}],"position":{"start":{"line":597,"column":1,"offset":26726},"end":{"line":597,"column":24,"offset":26749}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Number - Primitive","position":{"start":{"line":598,"column":3,"offset":26753},"end":{"line":598,"column":21,"offset":26771}}}],"position":{"start":{"line":598,"column":1,"offset":26751},"end":{"line":598,"column":21,"offset":26771}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"String - Primitive","position":{"start":{"line":599,"column":3,"offset":26775},"end":{"line":599,"column":21,"offset":26793}}}],"position":{"start":{"line":599,"column":1,"offset":26773},"end":{"line":599,"column":21,"offset":26793}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Array - Reference","position":{"start":{"line":600,"column":3,"offset":26797},"end":{"line":600,"column":20,"offset":26814}}}],"position":{"start":{"line":600,"column":1,"offset":26795},"end":{"line":600,"column":20,"offset":26814}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Object - Reference","position":{"start":{"line":601,"column":3,"offset":26818},"end":{"line":601,"column":21,"offset":26836}}}],"position":{"start":{"line":601,"column":1,"offset":26816},"end":{"line":601,"column":21,"offset":26836}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Function - Reference","position":{"start":{"line":602,"column":3,"offset":26840},"end":{"line":602,"column":23,"offset":26860}}}],"position":{"start":{"line":602,"column":1,"offset":26838},"end":{"line":602,"column":23,"offset":26860}}},{"type":"text","value":"\n"}],"position":{"start":{"line":595,"column":1,"offset":26683},"end":{"line":602,"column":23,"offset":26860}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"2. Identify when to use . vs ","position":{"start":{"line":604,"column":6,"offset":26869},"end":{"line":604,"column":35,"offset":26898}}},{"type":"text","value":"[","position":{"start":{"line":604,"column":35,"offset":26898},"end":{"line":604,"column":37,"offset":26900}}},{"type":"text","value":"]","position":{"start":{"line":604,"column":37,"offset":26900},"end":{"line":604,"column":39,"offset":26902}}},{"type":"text","value":" when accessing values of an object","position":{"start":{"line":604,"column":39,"offset":26902},"end":{"line":604,"column":74,"offset":26937}}}],"position":{"start":{"line":604,"column":1,"offset":26864},"end":{"line":604,"column":74,"offset":26937}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">one</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">two</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Choose the square brackets property accessor when the property name is determined at</span>\n<span class=\"token comment\">// runtime, or if the property name is not a valid identifier</span>\n<span class=\"token keyword\">let</span> myKey <span class=\"token operator\">=</span> <span class=\"token string\">'one'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>myKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Choose the dot property accessor when the property name is known ahead of time.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>two<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":606,"column":1,"offset":26941},"end":{"line":617,"column":4,"offset":27295}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"3. Write an object literal with a variable key using interpolation","position":{"start":{"line":619,"column":6,"offset":27304},"end":{"line":619,"column":72,"offset":27370}}}],"position":{"start":{"line":619,"column":1,"offset":27299},"end":{"line":619,"column":72,"offset":27370}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> keyName <span class=\"token operator\">=</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// If the key is not known, you can use an alternative `[]` syntax for</span>\n<span class=\"token comment\">// object initialization only</span>\n<span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>keyName<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":621,"column":1,"offset":27374},"end":{"line":629,"column":4,"offset":27565}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"4. Use the obj","position":{"start":{"line":631,"column":6,"offset":27574},"end":{"line":631,"column":20,"offset":27588}}},{"type":"text","value":"[","position":{"start":{"line":631,"column":20,"offset":27588},"end":{"line":631,"column":22,"offset":27590}}},{"type":"text","value":"key","position":{"start":{"line":631,"column":22,"offset":27590},"end":{"line":631,"column":25,"offset":27593}}},{"type":"text","value":"]","position":{"start":{"line":631,"column":25,"offset":27593},"end":{"line":631,"column":27,"offset":27595}}},{"type":"text","value":" !== undefined pattern to check if a given variable that contains a key exists in an object","position":{"start":{"line":631,"column":27,"offset":27595},"end":{"line":631,"column":118,"offset":27686}}}],"position":{"start":{"line":631,"column":1,"offset":27569},"end":{"line":631,"column":118,"offset":27686}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":633,"column":1,"offset":27690},"end":{"line":633,"column":4,"offset":27693}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">doesKeyExist</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// obj[key] !== undefined</span>\n    <span class=\"token comment\">// or:</span>\n    <span class=\"token keyword\">return</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> course <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">bootcamp</span><span class=\"token operator\">:</span> <span class=\"token string\">'Lambda'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">course</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bootcamp Prep'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">doesKeyExist</span><span class=\"token punctuation\">(</span>course<span class=\"token punctuation\">,</span> <span class=\"token string\">'course'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">doesKeyExist</span><span class=\"token punctuation\">(</span>course<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => false</span></code></pre></div>","position":{"start":{"line":636,"column":1,"offset":27699},"end":{"line":649,"column":4,"offset":28000}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"5. Utilize Object.keys and Object.values in a function","position":{"start":{"line":651,"column":6,"offset":28009},"end":{"line":651,"column":60,"offset":28063}}}],"position":{"start":{"line":651,"column":1,"offset":28004},"end":{"line":651,"column":60,"offset":28063}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":653,"column":1,"offset":28067},"end":{"line":653,"column":4,"offset":28070}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">printKeys</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">printValues</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">printKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">dog</span><span class=\"token operator\">:</span> <span class=\"token string\">'Strelka'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">dog2</span><span class=\"token operator\">:</span> <span class=\"token string\">'Belka'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">printValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">dog</span><span class=\"token operator\">:</span> <span class=\"token string\">'Strelka'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">dog2</span><span class=\"token operator\">:</span> <span class=\"token string\">'Belka'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":656,"column":1,"offset":28076},"end":{"line":670,"column":4,"offset":28356}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"6. Iterate through an object using a for in loop","position":{"start":{"line":672,"column":6,"offset":28365},"end":{"line":672,"column":54,"offset":28413}}}],"position":{"start":{"line":672,"column":1,"offset":28360},"end":{"line":672,"column":54,"offset":28413}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> player <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Sergey'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">skill</span><span class=\"token operator\">:</span> <span class=\"token string\">'hockey'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> player<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> player<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":674,"column":1,"offset":28417},"end":{"line":683,"column":4,"offset":28590}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"7. Define a function that utilizes ...rest syntax to accept an arbitrary number of arguments","position":{"start":{"line":685,"column":6,"offset":28599},"end":{"line":685,"column":98,"offset":28691}}}],"position":{"start":{"line":685,"column":1,"offset":28594},"end":{"line":685,"column":98,"offset":28691}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":687,"column":1,"offset":28695},"end":{"line":687,"column":4,"offset":28698}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">restSum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>otherNums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>otherNums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    otherNums<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sum <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">restSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 14</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">restSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 45</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">restSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 0</span></code></pre></div>","position":{"start":{"line":690,"column":1,"offset":28704},"end":{"line":707,"column":4,"offset":29031}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"8. Use ...spread syntax for Object literals and Array literals","position":{"start":{"line":709,"column":6,"offset":29040},"end":{"line":709,"column":68,"offset":29102}}}],"position":{"start":{"line":709,"column":1,"offset":29035},"end":{"line":709,"column":68,"offset":29102}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> numArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> moreNums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>numArray<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>moreNums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> shoe <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">size</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> newShoe <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>shoe<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">brand</span><span class=\"token operator\">:</span> <span class=\"token string\">'Nike'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">size</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newShoe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnewShoe<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newShoe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>shoe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":711,"column":1,"offset":29106},"end":{"line":725,"column":4,"offset":29402}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"9. Destructure an array to reference specific elements","position":{"start":{"line":727,"column":6,"offset":29411},"end":{"line":727,"column":60,"offset":29465}}}],"position":{"start":{"line":727,"column":1,"offset":29406},"end":{"line":727,"column":60,"offset":29465}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":729,"column":1,"offset":29469},"end":{"line":735,"column":4,"offset":29562}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"10. Destructure an object to reference specific values","position":{"start":{"line":737,"column":6,"offset":29571},"end":{"line":737,"column":60,"offset":29625}}}],"position":{"start":{"line":737,"column":1,"offset":29566},"end":{"line":737,"column":60,"offset":29625}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> me <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Ian'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">instruments</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'bass'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'synth'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'guitar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">siblings</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">brothers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alistair'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">sisters</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Meghan'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">instruments</span><span class=\"token operator\">:</span> musical_instruments<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">siblings</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> sisters <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> me<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>musical_instruments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sisters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":739,"column":1,"offset":29629},"end":{"line":759,"column":4,"offset":29985}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"11. Write a function that accepts a string as an argument and returns an object representing the count of each character in the array","position":{"start":{"line":761,"column":6,"offset":29994},"end":{"line":761,"column":139,"offset":30127}}}],"position":{"start":{"line":761,"column":1,"offset":29989},"end":{"line":761,"column":139,"offset":30127}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":763,"column":1,"offset":30131},"end":{"line":763,"column":4,"offset":30134}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">charCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">inputString</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> inputString<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">accum<span class=\"token punctuation\">,</span> el</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el <span class=\"token keyword\">in</span> accum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            accum<span class=\"token punctuation\">[</span>el<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> accum<span class=\"token punctuation\">[</span>el<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            accum<span class=\"token punctuation\">[</span>el<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> accum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">charCount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aaabbbeebbcdkjfalksdfjlkasdfasdfiiidkkdingds'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":766,"column":1,"offset":30140},"end":{"line":783,"column":4,"offset":30516}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[],"position":{"start":{"line":785,"column":1,"offset":30520},"end":{"line":785,"column":4,"offset":30523}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Review of Concepts","position":{"start":{"line":787,"column":5,"offset":30531},"end":{"line":787,"column":23,"offset":30549}}}],"position":{"start":{"line":787,"column":1,"offset":30527},"end":{"line":787,"column":23,"offset":30549}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"1. Identify the difference between const, let, and var declarations","position":{"start":{"line":789,"column":6,"offset":30558},"end":{"line":789,"column":73,"offset":30625}}}],"position":{"start":{"line":789,"column":1,"offset":30553},"end":{"line":789,"column":73,"offset":30625}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"2. Explain the difference between const, let, and var declarations","position":{"start":{"line":791,"column":6,"offset":30634},"end":{"line":791,"column":72,"offset":30700}}}],"position":{"start":{"line":791,"column":1,"offset":30629},"end":{"line":791,"column":72,"offset":30700}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":793,"column":1,"offset":30704},"end":{"line":796,"column":4,"offset":30732}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":798,"column":3,"offset":30738},"end":{"line":798,"column":8,"offset":30743}}},{"type":"text","value":" is the historical keyword used for variable declaration.","position":{"start":{"line":798,"column":8,"offset":30743},"end":{"line":798,"column":65,"offset":30800}}}],"position":{"start":{"line":798,"column":1,"offset":30736},"end":{"line":798,"column":65,"offset":30800}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":799,"column":3,"offset":30804},"end":{"line":799,"column":8,"offset":30809}}},{"type":"text","value":" declares variables in function scope, or global scope if not inside a function.","position":{"start":{"line":799,"column":8,"offset":30809},"end":{"line":799,"column":88,"offset":30889}}}],"position":{"start":{"line":799,"column":1,"offset":30802},"end":{"line":799,"column":88,"offset":30889}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"We consider ","position":{"start":{"line":800,"column":3,"offset":30893},"end":{"line":800,"column":15,"offset":30905}}},{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":800,"column":15,"offset":30905},"end":{"line":800,"column":20,"offset":30910}}},{"type":"text","value":" to be ","position":{"start":{"line":800,"column":20,"offset":30910},"end":{"line":800,"column":27,"offset":30917}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"deprecated","position":{"start":{"line":800,"column":28,"offset":30918},"end":{"line":800,"column":38,"offset":30928}}}],"position":{"start":{"line":800,"column":27,"offset":30917},"end":{"line":800,"column":39,"offset":30929}}},{"type":"text","value":" and it is never used in this course.","position":{"start":{"line":800,"column":39,"offset":30929},"end":{"line":800,"column":76,"offset":30966}}}],"position":{"start":{"line":800,"column":1,"offset":30891},"end":{"line":800,"column":76,"offset":30966}}},{"type":"text","value":"\n"}],"position":{"start":{"line":798,"column":1,"offset":30736},"end":{"line":800,"column":76,"offset":30966}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":802,"column":1,"offset":30970},"end":{"line":805,"column":4,"offset":30998}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":807,"column":3,"offset":31004},"end":{"line":807,"column":8,"offset":31009}}},{"type":"text","value":" is the keyword we use most often for variable declaration.","position":{"start":{"line":807,"column":8,"offset":31009},"end":{"line":807,"column":67,"offset":31068}}}],"position":{"start":{"line":807,"column":1,"offset":31002},"end":{"line":807,"column":67,"offset":31068}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":808,"column":3,"offset":31072},"end":{"line":808,"column":8,"offset":31077}}},{"type":"text","value":" declares variables in block scope.","position":{"start":{"line":808,"column":8,"offset":31077},"end":{"line":808,"column":43,"offset":31112}}}],"position":{"start":{"line":808,"column":1,"offset":31070},"end":{"line":808,"column":43,"offset":31112}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"variables declared with ","position":{"start":{"line":809,"column":3,"offset":31116},"end":{"line":809,"column":27,"offset":31140}}},{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":809,"column":27,"offset":31140},"end":{"line":809,"column":32,"offset":31145}}},{"type":"text","value":" are re-assignable.","position":{"start":{"line":809,"column":32,"offset":31145},"end":{"line":809,"column":51,"offset":31164}}}],"position":{"start":{"line":809,"column":1,"offset":31114},"end":{"line":809,"column":51,"offset":31164}}},{"type":"text","value":"\n"}],"position":{"start":{"line":807,"column":1,"offset":31002},"end":{"line":809,"column":51,"offset":31164}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":811,"column":1,"offset":31168},"end":{"line":814,"column":4,"offset":31198}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":816,"column":3,"offset":31204},"end":{"line":816,"column":10,"offset":31211}}},{"type":"text","value":" is a specialized form of ","position":{"start":{"line":816,"column":10,"offset":31211},"end":{"line":816,"column":36,"offset":31237}}},{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":816,"column":36,"offset":31237},"end":{"line":816,"column":41,"offset":31242}}},{"type":"text","value":" that can only be used to ","position":{"start":{"line":816,"column":41,"offset":31242},"end":{"line":816,"column":67,"offset":31268}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"initialize","position":{"start":{"line":816,"column":69,"offset":31270},"end":{"line":816,"column":79,"offset":31280}}}],"position":{"start":{"line":816,"column":67,"offset":31268},"end":{"line":816,"column":81,"offset":31282}}},{"type":"text","value":" a variable.","position":{"start":{"line":816,"column":81,"offset":31282},"end":{"line":816,"column":93,"offset":31294}}}],"position":{"start":{"line":816,"column":1,"offset":31202},"end":{"line":816,"column":93,"offset":31294}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Except when it is declared, you cannot assign to a ","position":{"start":{"line":817,"column":3,"offset":31298},"end":{"line":817,"column":54,"offset":31349}}},{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":817,"column":54,"offset":31349},"end":{"line":817,"column":61,"offset":31356}}},{"type":"text","value":" variable.","position":{"start":{"line":817,"column":61,"offset":31356},"end":{"line":817,"column":71,"offset":31366}}}],"position":{"start":{"line":817,"column":1,"offset":31296},"end":{"line":817,"column":71,"offset":31366}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":818,"column":3,"offset":31370},"end":{"line":818,"column":10,"offset":31377}}},{"type":"text","value":" scopes variables the same way that ","position":{"start":{"line":818,"column":10,"offset":31377},"end":{"line":818,"column":46,"offset":31413}}},{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":818,"column":46,"offset":31413},"end":{"line":818,"column":51,"offset":31418}}},{"type":"text","value":" does.","position":{"start":{"line":818,"column":51,"offset":31418},"end":{"line":818,"column":57,"offset":31424}}}],"position":{"start":{"line":818,"column":1,"offset":31368},"end":{"line":818,"column":57,"offset":31424}}},{"type":"text","value":"\n"}],"position":{"start":{"line":816,"column":1,"offset":31202},"end":{"line":818,"column":57,"offset":31424}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"3. Predict the evaluation of code that utilizes function scope, block scope, lexical scope, and scope chaining","position":{"start":{"line":820,"column":6,"offset":31433},"end":{"line":820,"column":116,"offset":31543}}}],"position":{"start":{"line":820,"column":1,"offset":31428},"end":{"line":820,"column":116,"offset":31543}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Consider this ","position":{"start":{"line":822,"column":1,"offset":31547},"end":{"line":822,"column":15,"offset":31561}}},{"type":"raw","value":"<code class=\"language-text\">run</code>","position":{"start":{"line":822,"column":15,"offset":31561},"end":{"line":822,"column":20,"offset":31566}}},{"type":"text","value":" function, inside which ","position":{"start":{"line":822,"column":20,"offset":31566},"end":{"line":822,"column":44,"offset":31590}}},{"type":"raw","value":"<code class=\"language-text\">foo</code>","position":{"start":{"line":822,"column":44,"offset":31590},"end":{"line":822,"column":49,"offset":31595}}},{"type":"text","value":" and ","position":{"start":{"line":822,"column":49,"offset":31595},"end":{"line":822,"column":54,"offset":31600}}},{"type":"raw","value":"<code class=\"language-text\">bar</code>","position":{"start":{"line":822,"column":54,"offset":31600},"end":{"line":822,"column":59,"offset":31605}}},{"type":"text","value":" have ","position":{"start":{"line":822,"column":59,"offset":31605},"end":{"line":822,"column":65,"offset":31611}}},{"type":"raw","value":"<code class=\"language-text\">function scope</code>","position":{"start":{"line":822,"column":65,"offset":31611},"end":{"line":822,"column":81,"offset":31627}}},{"type":"text","value":". ","position":{"start":{"line":822,"column":81,"offset":31627},"end":{"line":822,"column":83,"offset":31629}}},{"type":"raw","value":"<code class=\"language-text\">i</code>","position":{"start":{"line":822,"column":83,"offset":31629},"end":{"line":822,"column":86,"offset":31632}}},{"type":"text","value":" and ","position":{"start":{"line":822,"column":86,"offset":31632},"end":{"line":822,"column":91,"offset":31637}}},{"type":"raw","value":"<code class=\"language-text\">baz</code>","position":{"start":{"line":822,"column":91,"offset":31637},"end":{"line":822,"column":96,"offset":31642}}},{"type":"text","value":" are scoped to the block expression.","position":{"start":{"line":822,"column":96,"offset":31642},"end":{"line":822,"column":132,"offset":31678}}}],"position":{"start":{"line":822,"column":1,"offset":31547},"end":{"line":822,"column":132,"offset":31678}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// function and block scope in this example</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'Foo'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token string\">'Bar'</span><span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> baz <span class=\"token operator\">=</span> <span class=\"token string\">'Bazz'</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>baz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>baz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":824,"column":1,"offset":31682},"end":{"line":843,"column":4,"offset":31986}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Notice that referencing ","position":{"start":{"line":845,"column":1,"offset":31990},"end":{"line":845,"column":25,"offset":32014}}},{"type":"raw","value":"<code class=\"language-text\">baz</code>","position":{"start":{"line":845,"column":25,"offset":32014},"end":{"line":845,"column":30,"offset":32019}}},{"type":"text","value":" from outside it's block results in JavaScript throwing a ReferenceError.","position":{"start":{"line":845,"column":30,"offset":32019},"end":{"line":845,"column":103,"offset":32092}}}],"position":{"start":{"line":845,"column":1,"offset":31990},"end":{"line":845,"column":103,"offset":32092}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Consider this ","position":{"start":{"line":847,"column":1,"offset":32096},"end":{"line":847,"column":15,"offset":32110}}},{"type":"raw","value":"<code class=\"language-text\">run</code>","position":{"start":{"line":847,"column":15,"offset":32110},"end":{"line":847,"column":20,"offset":32115}}},{"type":"text","value":" function, inside of which ","position":{"start":{"line":847,"column":20,"offset":32115},"end":{"line":847,"column":47,"offset":32142}}},{"type":"raw","value":"<code class=\"language-text\">foo</code>","position":{"start":{"line":847,"column":47,"offset":32142},"end":{"line":847,"column":52,"offset":32147}}},{"type":"text","value":" has ","position":{"start":{"line":847,"column":52,"offset":32147},"end":{"line":847,"column":57,"offset":32152}}},{"type":"raw","value":"<code class=\"language-text\">function scope</code>","position":{"start":{"line":847,"column":57,"offset":32152},"end":{"line":847,"column":73,"offset":32168}}},{"type":"text","value":".","position":{"start":{"line":847,"column":73,"offset":32168},"end":{"line":847,"column":74,"offset":32169}}}],"position":{"start":{"line":847,"column":1,"offset":32096},"end":{"line":847,"column":74,"offset":32169}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":849,"column":1,"offset":32173},"end":{"line":849,"column":4,"offset":32176}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n    <span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'Foo'</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Foo</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":852,"column":1,"offset":32182},"end":{"line":863,"column":4,"offset":32319}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Consider this ","position":{"start":{"line":865,"column":1,"offset":32323},"end":{"line":865,"column":15,"offset":32337}}},{"type":"raw","value":"<code class=\"language-text\">func1</code>","position":{"start":{"line":865,"column":15,"offset":32337},"end":{"line":865,"column":22,"offset":32344}}},{"type":"text","value":" function and it's nested scopes.","position":{"start":{"line":865,"column":22,"offset":32344},"end":{"line":865,"column":55,"offset":32377}}}],"position":{"start":{"line":865,"column":1,"offset":32323},"end":{"line":865,"column":55,"offset":32377}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// global scope</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// func1 scope</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// func2 scope</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">func3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// func3 scope</span>\n\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> arg3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":867,"column":1,"offset":32381},"end":{"line":883,"column":4,"offset":32655}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"6. Implement a closure and explain how the closure effects scope","position":{"start":{"line":885,"column":6,"offset":32664},"end":{"line":885,"column":70,"offset":32728}}}],"position":{"start":{"line":885,"column":1,"offset":32659},"end":{"line":885,"column":70,"offset":32728}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">adder</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arg2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> arg1 <span class=\"token operator\">+</span> arg2<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> func2 <span class=\"token operator\">=</span> <span class=\"token function\">adder</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 4;</span></code></pre></div>","position":{"start":{"line":887,"column":1,"offset":32732},"end":{"line":898,"column":4,"offset":32922}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"4. Define an arrow function","position":{"start":{"line":900,"column":6,"offset":32931},"end":{"line":900,"column":33,"offset":32958}}}],"position":{"start":{"line":900,"column":1,"offset":32926},"end":{"line":900,"column":33,"offset":32958}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">returnValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> val<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":902,"column":1,"offset":32962},"end":{"line":905,"column":4,"offset":33011}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This simple construct will create a function that accepts ","position":{"start":{"line":907,"column":1,"offset":33015},"end":{"line":907,"column":59,"offset":33073}}},{"type":"raw","value":"<code class=\"language-text\">val</code>","position":{"start":{"line":907,"column":59,"offset":33073},"end":{"line":907,"column":64,"offset":33078}}},{"type":"text","value":" as a parameter, and returns ","position":{"start":{"line":907,"column":64,"offset":33078},"end":{"line":907,"column":93,"offset":33107}}},{"type":"raw","value":"<code class=\"language-text\">val</code>","position":{"start":{"line":907,"column":93,"offset":33107},"end":{"line":907,"column":98,"offset":33112}}},{"type":"text","value":" immediately. We do not need to type ","position":{"start":{"line":907,"column":98,"offset":33112},"end":{"line":907,"column":135,"offset":33149}}},{"type":"raw","value":"<code class=\"language-text\">return val</code>","position":{"start":{"line":907,"column":135,"offset":33149},"end":{"line":907,"column":147,"offset":33161}}},{"type":"text","value":", because this is a single-line function.","position":{"start":{"line":907,"column":147,"offset":33161},"end":{"line":907,"column":188,"offset":33202}}}],"position":{"start":{"line":907,"column":1,"offset":33015},"end":{"line":907,"column":188,"offset":33202}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Identically, we could write","position":{"start":{"line":909,"column":1,"offset":33206},"end":{"line":909,"column":28,"offset":33233}}}],"position":{"start":{"line":909,"column":1,"offset":33206},"end":{"line":909,"column":28,"offset":33233}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">returnValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":911,"column":1,"offset":33237},"end":{"line":916,"column":4,"offset":33304}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"5. Given an arrow function, deduce the value of ","position":{"start":{"line":918,"column":6,"offset":33313},"end":{"line":918,"column":54,"offset":33361}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":918,"column":54,"offset":33361},"end":{"line":918,"column":60,"offset":33367}}},{"type":"text","value":" without executing the code","position":{"start":{"line":918,"column":60,"offset":33367},"end":{"line":918,"column":87,"offset":33394}}}],"position":{"start":{"line":918,"column":1,"offset":33308},"end":{"line":918,"column":87,"offset":33394}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":920,"column":1,"offset":33398},"end":{"line":920,"column":4,"offset":33401}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fDAdder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> ele</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> acc <span class=\"token operator\">+</span> ele<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">fDAdder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":923,"column":1,"offset":33407},"end":{"line":936,"column":4,"offset":33580}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If we use a ","position":{"start":{"line":938,"column":1,"offset":33584},"end":{"line":938,"column":13,"offset":33596}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"function declaration","position":{"start":{"line":938,"column":14,"offset":33597},"end":{"line":938,"column":34,"offset":33617}}}],"position":{"start":{"line":938,"column":13,"offset":33596},"end":{"line":938,"column":35,"offset":33618}}},{"type":"text","value":" style function, the ","position":{"start":{"line":938,"column":35,"offset":33618},"end":{"line":938,"column":56,"offset":33639}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":938,"column":56,"offset":33639},"end":{"line":938,"column":62,"offset":33645}}},{"type":"text","value":" variable is set to the ","position":{"start":{"line":938,"column":62,"offset":33645},"end":{"line":938,"column":86,"offset":33669}}},{"type":"raw","value":"<code class=\"language-text\">global</code>","position":{"start":{"line":938,"column":86,"offset":33669},"end":{"line":938,"column":94,"offset":33677}}},{"type":"text","value":" object ","position":{"start":{"line":938,"column":94,"offset":33677},"end":{"line":938,"column":102,"offset":33685}}},{"type":"text","value":"(","position":{"start":{"line":938,"column":102,"offset":33685},"end":{"line":938,"column":104,"offset":33687}}},{"type":"text","value":"i.e. ","position":{"start":{"line":938,"column":104,"offset":33687},"end":{"line":938,"column":109,"offset":33692}}},{"type":"raw","value":"<code class=\"language-text\">Object [global]</code>","position":{"start":{"line":938,"column":109,"offset":33692},"end":{"line":938,"column":126,"offset":33709}}},{"type":"text","value":" in Node.JS and ","position":{"start":{"line":938,"column":126,"offset":33709},"end":{"line":938,"column":142,"offset":33725}}},{"type":"raw","value":"<code class=\"language-text\">Window</code>","position":{"start":{"line":938,"column":142,"offset":33725},"end":{"line":938,"column":150,"offset":33733}}},{"type":"text","value":" in your browser","position":{"start":{"line":938,"column":150,"offset":33733},"end":{"line":938,"column":166,"offset":33749}}},{"type":"text","value":")","position":{"start":{"line":938,"column":166,"offset":33749},"end":{"line":938,"column":168,"offset":33751}}},{"type":"text","value":".","position":{"start":{"line":938,"column":168,"offset":33751},"end":{"line":938,"column":169,"offset":33752}}}],"position":{"start":{"line":938,"column":1,"offset":33584},"end":{"line":938,"column":169,"offset":33752}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">adder</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> ele</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">+=</span> ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">adder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":940,"column":1,"offset":33756},"end":{"line":947,"column":4,"offset":33891}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this example, we use a ","position":{"start":{"line":949,"column":1,"offset":33895},"end":{"line":949,"column":27,"offset":33921}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"fat arrow","position":{"start":{"line":949,"column":28,"offset":33922},"end":{"line":949,"column":37,"offset":33931}}}],"position":{"start":{"line":949,"column":27,"offset":33921},"end":{"line":949,"column":38,"offset":33932}}},{"type":"text","value":" style function. Note that when we declare a funciton like this ","position":{"start":{"line":949,"column":38,"offset":33932},"end":{"line":949,"column":102,"offset":33996}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":949,"column":102,"offset":33996},"end":{"line":949,"column":108,"offset":34002}}},{"type":"text","value":" becomes","position":{"start":{"line":949,"column":108,"offset":34002},"end":{"line":949,"column":116,"offset":34010}}}],"position":{"start":{"line":949,"column":1,"offset":33895},"end":{"line":949,"column":116,"offset":34010}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"7. Define a method that references this on an object literal","position":{"start":{"line":951,"column":6,"offset":34019},"end":{"line":951,"column":66,"offset":34079}}}],"position":{"start":{"line":951,"column":1,"offset":34014},"end":{"line":951,"column":66,"offset":34079}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> pokemon <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">firstname</span><span class=\"token operator\">:</span> <span class=\"token string\">'Pika'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">lastname</span><span class=\"token operator\">:</span> <span class=\"token string\">'Chu'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">getPokeName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> fullname <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> fullname<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pokemon<span class=\"token punctuation\">.</span><span class=\"token function\">getPokeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":953,"column":1,"offset":34083},"end":{"line":965,"column":4,"offset":34334}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"8. Utilize the built in Function","position":{"start":{"line":967,"column":6,"offset":34343},"end":{"line":967,"column":38,"offset":34375}}},{"type":"text","value":"#","position":{"start":{"line":967,"column":38,"offset":34375},"end":{"line":967,"column":40,"offset":34377}}},{"type":"text","value":"bind on a callback to maintain the context of ","position":{"start":{"line":967,"column":40,"offset":34377},"end":{"line":967,"column":86,"offset":34423}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":967,"column":86,"offset":34423},"end":{"line":967,"column":92,"offset":34429}}}],"position":{"start":{"line":967,"column":1,"offset":34338},"end":{"line":967,"column":92,"offset":34429}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> pokemon <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">firstname</span><span class=\"token operator\">:</span> <span class=\"token string\">'Pika'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">lastname</span><span class=\"token operator\">:</span> <span class=\"token string\">'Chu'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">getPokeName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> fullname <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> fullname<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> logPokemon <span class=\"token operator\">=</span> pokemon<span class=\"token punctuation\">.</span><span class=\"token function\">getPokename</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>pokemon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">logPokemon</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sushi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'algorithms'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Pika Chu loves sushi and algorithms</span></code></pre></div>","position":{"start":{"line":969,"column":1,"offset":34433},"end":{"line":983,"column":4,"offset":34779}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"9. Given a code snippet, identify what ","position":{"start":{"line":985,"column":6,"offset":34788},"end":{"line":985,"column":45,"offset":34827}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":985,"column":45,"offset":34827},"end":{"line":985,"column":51,"offset":34833}}},{"type":"text","value":" refers to","position":{"start":{"line":985,"column":51,"offset":34833},"end":{"line":985,"column":61,"offset":34843}}}],"position":{"start":{"line":985,"column":1,"offset":34783},"end":{"line":985,"column":61,"offset":34843}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":987,"column":1,"offset":34847},"end":{"line":987,"column":4,"offset":34850}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this.name = name;</span>\n    <span class=\"token comment\">// let that = this;</span>\n\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// console.log(this); // => Window</span>\n        <span class=\"token comment\">// console.log(that); // => [Function] => Person</span>\n        <span class=\"token comment\">// this.sayName(); // => no method error</span>\n        that<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> jane <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jane'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":990,"column":1,"offset":34856},"end":{"line":1011,"column":4,"offset":35290}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1012,"column":1,"offset":35292}}}}