{"expireTime":9007200911871013000,"key":"transformer-remark-markdown-html-ast-09fa927716b5af7c6cb57fd80e2cd3f1-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"raw","value":"<h2 align=\"center\">JavaScript challenges on Asynchronous programming</h2>","position":{"start":{"line":6,"column":1,"offset":10},"end":{"line":6,"column":74,"offset":83}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>","position":{"start":{"line":8,"column":1,"offset":87},"end":{"line":8,"column":5,"offset":91}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Print \"Hello, world\" with a delay of 3 seconds","position":{"start":{"line":10,"column":5,"offset":99},"end":{"line":10,"column":54,"offset":148}}}],"position":{"start":{"line":10,"column":1,"offset":95},"end":{"line":10,"column":54,"offset":148}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"setTimeout takes a function as the 1st argument and optional timeout delay & list of values as the function parameters","position":{"start":{"line":12,"column":3,"offset":154},"end":{"line":12,"column":121,"offset":272}}}],"position":{"start":{"line":12,"column":1,"offset":152},"end":{"line":12,"column":121,"offset":272}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"setTimeout returns an id (number) which can be used to stop the setTimeout using clearTimeout function","position":{"start":{"line":13,"column":3,"offset":276},"end":{"line":13,"column":105,"offset":378}}}],"position":{"start":{"line":13,"column":1,"offset":274},"end":{"line":13,"column":105,"offset":378}}},{"type":"text","value":"\n"}],"position":{"start":{"line":12,"column":1,"offset":152},"end":{"line":13,"column":105,"offset":378}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello, World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":15,"column":1,"offset":382},"end":{"line":19,"column":4,"offset":473}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":21,"column":1,"offset":477},"end":{"line":23,"column":4,"offset":541}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello, World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":25,"column":1,"offset":545},"end":{"line":27,"column":4,"offset":603}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Notes","position":{"start":{"line":29,"column":8,"offset":614},"end":{"line":29,"column":13,"offset":619}}}],"position":{"start":{"line":29,"column":1,"offset":607},"end":{"line":29,"column":13,"offset":619}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Zero or more values that represent any parameters you want to pass to the function when it is run.","position":{"start":{"line":30,"column":1,"offset":621},"end":{"line":30,"column":99,"offset":719}}}],"position":{"start":{"line":30,"column":1,"offset":621},"end":{"line":30,"column":99,"offset":719}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"References","position":{"start":{"line":32,"column":8,"offset":730},"end":{"line":32,"column":18,"offset":740}}}],"position":{"start":{"line":32,"column":1,"offset":723},"end":{"line":32,"column":18,"offset":740}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Timeouts_and_intervals"},"children":[{"type":"text","value":"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Timeouts_and_intervals","position":{"start":{"line":34,"column":4,"offset":747},"end":{"line":34,"column":97,"offset":840}}}],"position":{"start":{"line":34,"column":3,"offset":746},"end":{"line":34,"column":98,"offset":841}}}],"position":{"start":{"line":34,"column":1,"offset":744},"end":{"line":34,"column":98,"offset":841}}},{"type":"text","value":"\n"}],"position":{"start":{"line":34,"column":1,"offset":744},"end":{"line":34,"column":98,"offset":841}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":36,"column":1,"offset":845},"end":{"line":36,"column":7,"offset":851}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Create a function which receives a function as argument and executes it after 2 seconds","position":{"start":{"line":38,"column":5,"offset":859},"end":{"line":38,"column":95,"offset":949}}}],"position":{"start":{"line":38,"column":1,"offset":855},"end":{"line":38,"column":95,"offset":949}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">callbackExec</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> callback <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Callback is executed after 2 seconds'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">displayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">callbackExec</span><span class=\"token punctuation\">(</span>displayHello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":40,"column":1,"offset":953},"end":{"line":55,"column":4,"offset":1265}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":57,"column":1,"offset":1269},"end":{"line":57,"column":7,"offset":1275}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Print numbers from 1 to 10 with delay of 1 second between each value being printed","position":{"start":{"line":59,"column":5,"offset":1283},"end":{"line":59,"column":90,"offset":1368}}}],"position":{"start":{"line":59,"column":1,"offset":1279},"end":{"line":59,"column":90,"offset":1368}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> num2<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":61,"column":1,"offset":1372},"end":{"line":66,"column":4,"offset":1500}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token keyword\">function</span> <span class=\"token function\">displayWithDelay</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">!==</span> num2<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>displayWithDelay<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":68,"column":1,"offset":1504},"end":{"line":75,"column":4,"offset":1672}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Notes","position":{"start":{"line":77,"column":8,"offset":1683},"end":{"line":77,"column":13,"offset":1688}}}],"position":{"start":{"line":77,"column":1,"offset":1676},"end":{"line":77,"column":13,"offset":1688}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the 2nd solution, recursive setTimeout is used.","position":{"start":{"line":78,"column":1,"offset":1690},"end":{"line":78,"column":51,"offset":1740}}}],"position":{"start":{"line":78,"column":1,"offset":1690},"end":{"line":78,"column":51,"offset":1740}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"References","position":{"start":{"line":80,"column":8,"offset":1751},"end":{"line":80,"column":18,"offset":1761}}}],"position":{"start":{"line":80,"column":1,"offset":1744},"end":{"line":80,"column":18,"offset":1761}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://javascript.info/settimeout-setinterval"},"children":[{"type":"text","value":"https://javascript.info/settimeout-setinterval","position":{"start":{"line":82,"column":4,"offset":1768},"end":{"line":82,"column":50,"offset":1814}}}],"position":{"start":{"line":82,"column":3,"offset":1767},"end":{"line":82,"column":51,"offset":1815}}}],"position":{"start":{"line":82,"column":1,"offset":1765},"end":{"line":82,"column":51,"offset":1815}}},{"type":"text","value":"\n"}],"position":{"start":{"line":82,"column":1,"offset":1765},"end":{"line":82,"column":51,"offset":1815}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":84,"column":1,"offset":1819},"end":{"line":84,"column":7,"offset":1825}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Print numbers from 1 to 10 with delay of 1 second between each value being printed using setInterval","position":{"start":{"line":86,"column":5,"offset":1833},"end":{"line":86,"column":108,"offset":1936}}}],"position":{"start":{"line":86,"column":1,"offset":1829},"end":{"line":86,"column":108,"offset":1936}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">setInterval</code>","position":{"start":{"line":88,"column":3,"offset":1942},"end":{"line":88,"column":16,"offset":1955}}},{"type":"text","value":" function repeats a block of code at every given timing event","position":{"start":{"line":88,"column":16,"offset":1955},"end":{"line":88,"column":77,"offset":2016}}}],"position":{"start":{"line":88,"column":1,"offset":1940},"end":{"line":88,"column":77,"offset":2016}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">clearInterval</code>","position":{"start":{"line":89,"column":3,"offset":2020},"end":{"line":89,"column":18,"offset":2035}}},{"type":"text","value":" is used to stop the setInterval execution","position":{"start":{"line":89,"column":18,"offset":2035},"end":{"line":89,"column":60,"offset":2077}}}],"position":{"start":{"line":89,"column":1,"offset":2018},"end":{"line":89,"column":60,"offset":2077}}},{"type":"text","value":"\n"}],"position":{"start":{"line":88,"column":1,"offset":1940},"end":{"line":89,"column":60,"offset":2077}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> intervalId <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> num2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>intervalId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":91,"column":1,"offset":2081},"end":{"line":99,"column":4,"offset":2269}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":101,"column":1,"offset":2273},"end":{"line":101,"column":7,"offset":2279}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Print numbers from 10 to 1 with delay of 1 second between each value being printed using setTimeout using pre ES6 features only","position":{"start":{"line":103,"column":5,"offset":2287},"end":{"line":103,"column":135,"offset":2417}}}],"position":{"start":{"line":103,"column":1,"offset":2283},"end":{"line":103,"column":135,"offset":2417}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"We can use 3rd parameter of setTimeout to pass the value of iteration which creates a new scope each time loop iterates","position":{"start":{"line":105,"column":3,"offset":2423},"end":{"line":105,"column":122,"offset":2542}}}],"position":{"start":{"line":105,"column":1,"offset":2421},"end":{"line":105,"column":122,"offset":2542}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"We can also use an inner function scope (IIFE) within the for loop for each iteration","position":{"start":{"line":106,"column":3,"offset":2546},"end":{"line":106,"column":88,"offset":2631}}}],"position":{"start":{"line":106,"column":1,"offset":2544},"end":{"line":106,"column":88,"offset":2631}}},{"type":"text","value":"\n"}],"position":{"start":{"line":105,"column":1,"offset":2421},"end":{"line":106,"column":88,"offset":2631}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> num2<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":108,"column":1,"offset":2635},"end":{"line":113,"column":4,"offset":2764}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> num2<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":115,"column":1,"offset":2768},"end":{"line":122,"column":4,"offset":2940}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"References","position":{"start":{"line":124,"column":8,"offset":2951},"end":{"line":124,"column":18,"offset":2961}}}],"position":{"start":{"line":124,"column":1,"offset":2944},"end":{"line":124,"column":18,"offset":2961}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/scope%20%26%20closures/ch5.md"},"children":[{"type":"text","value":"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/scope%20%26%20closures/ch5.md","position":{"start":{"line":126,"column":4,"offset":2968},"end":{"line":126,"column":88,"offset":3052}}}],"position":{"start":{"line":126,"column":3,"offset":2967},"end":{"line":126,"column":89,"offset":3053}}}],"position":{"start":{"line":126,"column":1,"offset":2965},"end":{"line":126,"column":89,"offset":3053}}},{"type":"text","value":"\n"}],"position":{"start":{"line":126,"column":1,"offset":2965},"end":{"line":126,"column":89,"offset":3053}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":128,"column":1,"offset":3057},"end":{"line":128,"column":7,"offset":3063}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Write a utility which prints numbers starting from an initial value and increment in steps which can be started and stopped by the user, any number of times","position":{"start":{"line":130,"column":5,"offset":3071},"end":{"line":130,"column":164,"offset":3230}}}],"position":{"start":{"line":130,"column":1,"offset":3067},"end":{"line":130,"column":164,"offset":3230}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The functionality to start and stop can be exposed from a function which internally takes care of incrementing and displaying data","position":{"start":{"line":132,"column":3,"offset":3236},"end":{"line":132,"column":133,"offset":3366}}}],"position":{"start":{"line":132,"column":1,"offset":3234},"end":{"line":132,"column":133,"offset":3366}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">setInterval</code>","position":{"start":{"line":133,"column":3,"offset":3370},"end":{"line":133,"column":16,"offset":3383}}},{"type":"text","value":" can be used to achieve the task and handle the start & stop of data display","position":{"start":{"line":133,"column":16,"offset":3383},"end":{"line":133,"column":92,"offset":3459}}}],"position":{"start":{"line":133,"column":1,"offset":3368},"end":{"line":133,"column":92,"offset":3459}}},{"type":"text","value":"\n"}],"position":{"start":{"line":132,"column":1,"offset":3234},"end":{"line":133,"column":92,"offset":3459}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">init <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> step <span class=\"token operator\">=</span> <span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> intervalId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> init<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">startTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>intervalId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            intervalId <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                count <span class=\"token operator\">+=</span> step<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">stopTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>intervalId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        intervalId <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        startTimer<span class=\"token punctuation\">,</span>\n        stopTimer<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// driver code</span>\n<span class=\"token keyword\">const</span> timerObj <span class=\"token operator\">=</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntimerObj<span class=\"token punctuation\">.</span><span class=\"token function\">startTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    timerObj<span class=\"token punctuation\">.</span><span class=\"token function\">stopTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":135,"column":1,"offset":3463},"end":{"line":166,"column":4,"offset":4072}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Notes","position":{"start":{"line":168,"column":8,"offset":4083},"end":{"line":168,"column":13,"offset":4088}}}],"position":{"start":{"line":168,"column":1,"offset":4076},"end":{"line":168,"column":13,"offset":4088}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The function can also be modified to have completion after which timer can not be started","position":{"start":{"line":169,"column":1,"offset":4090},"end":{"line":169,"column":90,"offset":4179}}}],"position":{"start":{"line":169,"column":1,"offset":4090},"end":{"line":169,"column":90,"offset":4179}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":171,"column":1,"offset":4183},"end":{"line":171,"column":7,"offset":4189}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Execute an array of asynchronous functions one after the other in sequence using callbacks","position":{"start":{"line":173,"column":5,"offset":4197},"end":{"line":173,"column":98,"offset":4290}}}],"position":{"start":{"line":173,"column":1,"offset":4193},"end":{"line":173,"column":98,"offset":4290}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The asynchronous function can be simulated using setTimeout which executes the callback","position":{"start":{"line":175,"column":3,"offset":4296},"end":{"line":175,"column":90,"offset":4383}}}],"position":{"start":{"line":175,"column":1,"offset":4294},"end":{"line":175,"column":90,"offset":4383}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The array of functions execution can be managed by having a function which takes care of execution of all the async functions","position":{"start":{"line":176,"column":3,"offset":4387},"end":{"line":176,"column":128,"offset":4512}}}],"position":{"start":{"line":176,"column":1,"offset":4385},"end":{"line":176,"column":128,"offset":4512}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Asynchronous functions need not be aware of the function to be executed and will take a callback as argument and execute it after completion","position":{"start":{"line":177,"column":3,"offset":4516},"end":{"line":177,"column":143,"offset":4656}}}],"position":{"start":{"line":177,"column":1,"offset":4514},"end":{"line":177,"column":143,"offset":4656}}},{"type":"text","value":"\n"}],"position":{"start":{"line":175,"column":1,"offset":4294},"end":{"line":177,"column":143,"offset":4656}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">asyncFunc1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Started asyncFunc1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Completed asyncFunc1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">asyncFunc2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Started asyncFunc2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Completed asyncFunc2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">asyncFunc3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Started asyncFunc3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Completed asyncFunc3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">callbackManager</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">asyncFuncs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">nextFuncExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> nextAsyncFunc <span class=\"token operator\">=</span> asyncFuncs<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextAsyncFunc <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> nextAsyncFunc <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">nextAsyncFunc</span><span class=\"token punctuation\">(</span>nextFuncExecutor<span class=\"token punctuation\">,</span> asyncFuncs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">nextFuncExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// driver code</span>\n<span class=\"token function\">callbackManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>asyncFunc1<span class=\"token punctuation\">,</span> asyncFunc2<span class=\"token punctuation\">,</span> asyncFunc3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":179,"column":1,"offset":4660},"end":{"line":216,"column":4,"offset":5595}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Notes","position":{"start":{"line":218,"column":8,"offset":5606},"end":{"line":218,"column":13,"offset":5611}}}],"position":{"start":{"line":218,"column":1,"offset":5599},"end":{"line":218,"column":13,"offset":5611}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"3 asynchrounous functions are considered here, but the program should work for any number","position":{"start":{"line":219,"column":1,"offset":5613},"end":{"line":219,"column":90,"offset":5702}}}],"position":{"start":{"line":219,"column":1,"offset":5613},"end":{"line":219,"column":90,"offset":5702}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":221,"column":1,"offset":5706},"end":{"line":221,"column":7,"offset":5712}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Execute the given list of asynchronous functions in parallel and return the results as an array to the callback","position":{"start":{"line":223,"column":5,"offset":5720},"end":{"line":223,"column":119,"offset":5834}}}],"position":{"start":{"line":223,"column":1,"offset":5716},"end":{"line":223,"column":119,"offset":5834}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Example</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">asyncFunc1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">asyncFunc2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">asyncFunc3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">asyncParallel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>asyncFunc1<span class=\"token punctuation\">,</span> asyncFunc2<span class=\"token punctuation\">,</span> asyncFunc3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                            <span class=\"token comment\">// 1, 2, 3 (prints results of each asynchronous function in order)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":225,"column":1,"offset":5838},"end":{"line":248,"column":4,"offset":6363}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The async functions can be executed in parallel using the loop and can be tracked for completion with a counter","position":{"start":{"line":250,"column":3,"offset":6369},"end":{"line":250,"column":114,"offset":6480}}}],"position":{"start":{"line":250,"column":1,"offset":6367},"end":{"line":250,"column":114,"offset":6480}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The callback function can be sent to the async functions and the results will be stored in the array which will be returned after the completion of all","position":{"start":{"line":251,"column":3,"offset":6484},"end":{"line":251,"column":154,"offset":6635}}}],"position":{"start":{"line":251,"column":1,"offset":6482},"end":{"line":251,"column":154,"offset":6635}}},{"type":"text","value":"\n"}],"position":{"start":{"line":250,"column":1,"offset":6367},"end":{"line":251,"column":154,"offset":6635}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">asyncParallel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">asyncFuncArr<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> resultArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>asyncFuncArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> resultCounter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    asyncFuncArr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">async<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            resultArr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n            resultCounter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resultCounter <span class=\"token operator\">>=</span> asyncFuncArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>resultArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":253,"column":1,"offset":6639},"end":{"line":268,"column":4,"offset":7064}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"References","position":{"start":{"line":270,"column":8,"offset":7075},"end":{"line":270,"column":18,"offset":7085}}}],"position":{"start":{"line":270,"column":1,"offset":7068},"end":{"line":270,"column":18,"offset":7085}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://jsvault.com/async-parallel"},"children":[{"type":"text","value":"https://jsvault.com/async-parallel","position":{"start":{"line":272,"column":4,"offset":7092},"end":{"line":272,"column":38,"offset":7126}}}],"position":{"start":{"line":272,"column":3,"offset":7091},"end":{"line":272,"column":39,"offset":7127}}}],"position":{"start":{"line":272,"column":1,"offset":7089},"end":{"line":272,"column":39,"offset":7127}}},{"type":"text","value":"\n"}],"position":{"start":{"line":272,"column":1,"offset":7089},"end":{"line":272,"column":39,"offset":7127}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":274,"column":1,"offset":7131},"end":{"line":274,"column":7,"offset":7137}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Execute 3 asynchronous functions one after the other in sequence using promise chaining","position":{"start":{"line":276,"column":5,"offset":7145},"end":{"line":276,"column":95,"offset":7235}}}],"position":{"start":{"line":276,"column":1,"offset":7141},"end":{"line":276,"column":95,"offset":7235}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The implementation of chaining is that the result is passed through the chain of ","position":{"start":{"line":278,"column":3,"offset":7241},"end":{"line":278,"column":84,"offset":7322}}},{"type":"raw","value":"<code class=\"language-text\">then</code>","position":{"start":{"line":278,"column":84,"offset":7322},"end":{"line":278,"column":90,"offset":7328}}},{"type":"text","value":" handlers for all the promises","position":{"start":{"line":278,"column":90,"offset":7328},"end":{"line":278,"column":120,"offset":7358}}}],"position":{"start":{"line":278,"column":1,"offset":7239},"end":{"line":278,"column":120,"offset":7358}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">then</code>","position":{"start":{"line":279,"column":3,"offset":7362},"end":{"line":279,"column":9,"offset":7368}}},{"type":"text","value":" method on Promise also returns a promise which can be used to perform ","position":{"start":{"line":279,"column":9,"offset":7368},"end":{"line":279,"column":80,"offset":7439}}},{"type":"raw","value":"<code class=\"language-text\">then</code>","position":{"start":{"line":279,"column":80,"offset":7439},"end":{"line":279,"column":86,"offset":7445}}},{"type":"text","value":" on the returned promise","position":{"start":{"line":279,"column":86,"offset":7445},"end":{"line":279,"column":110,"offset":7469}}}],"position":{"start":{"line":279,"column":1,"offset":7360},"end":{"line":279,"column":110,"offset":7469}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The errors in promise / promise chaining can be handled with the error callback for each promise when it settles or with a generic catch block","position":{"start":{"line":280,"column":3,"offset":7473},"end":{"line":280,"column":145,"offset":7615}}}],"position":{"start":{"line":280,"column":1,"offset":7471},"end":{"line":280,"column":145,"offset":7615}}},{"type":"text","value":"\n"}],"position":{"start":{"line":278,"column":1,"offset":7239},"end":{"line":280,"column":145,"offset":7615}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">asyncFunc1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Completed async1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">asyncFunc2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Completed async2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">asyncFunc3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Completed async3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'All succeeded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Failure in '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n              <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n              console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Failure in '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Failure in '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":282,"column":1,"offset":7619},"end":{"line":308,"column":4,"offset":8325}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">asyncFunc1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>asyncFunc2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>asyncFunc3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error occured in one of the async function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":310,"column":1,"offset":8329},"end":{"line":315,"column":4,"offset":8470}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Notes","position":{"start":{"line":317,"column":8,"offset":8481},"end":{"line":317,"column":13,"offset":8486}}}],"position":{"start":{"line":317,"column":1,"offset":8474},"end":{"line":317,"column":13,"offset":8486}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If ","position":{"start":{"line":318,"column":1,"offset":8488},"end":{"line":318,"column":4,"offset":8491}}},{"type":"raw","value":"<code class=\"language-text\">then</code>","position":{"start":{"line":318,"column":4,"offset":8491},"end":{"line":318,"column":10,"offset":8497}}},{"type":"text","value":" method has a return statement which is a promise then it will be considered for the next promise chain until it settles","position":{"start":{"line":318,"column":10,"offset":8497},"end":{"line":318,"column":130,"offset":8617}}}],"position":{"start":{"line":318,"column":1,"offset":8488},"end":{"line":318,"column":130,"offset":8617}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"References","position":{"start":{"line":320,"column":8,"offset":8628},"end":{"line":320,"column":18,"offset":8638}}}],"position":{"start":{"line":320,"column":1,"offset":8621},"end":{"line":320,"column":18,"offset":8638}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://javascript.info/promise-chaining"},"children":[{"type":"text","value":"https://javascript.info/promise-chaining","position":{"start":{"line":322,"column":4,"offset":8645},"end":{"line":322,"column":44,"offset":8685}}}],"position":{"start":{"line":322,"column":3,"offset":8644},"end":{"line":322,"column":45,"offset":8686}}}],"position":{"start":{"line":322,"column":1,"offset":8642},"end":{"line":322,"column":45,"offset":8686}}},{"type":"text","value":"\n"}],"position":{"start":{"line":322,"column":1,"offset":8642},"end":{"line":322,"column":45,"offset":8686}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":324,"column":1,"offset":8690},"end":{"line":324,"column":7,"offset":8696}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Execute 3 asynchronous functions one after the other in sequence using async await","position":{"start":{"line":326,"column":5,"offset":8704},"end":{"line":326,"column":90,"offset":8789}}}],"position":{"start":{"line":326,"column":1,"offset":8700},"end":{"line":326,"column":90,"offset":8789}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Async function with ","position":{"start":{"line":328,"column":3,"offset":8795},"end":{"line":328,"column":23,"offset":8815}}},{"type":"raw","value":"<code class=\"language-text\">await</code>","position":{"start":{"line":328,"column":23,"offset":8815},"end":{"line":328,"column":30,"offset":8822}}},{"type":"text","value":" for each promise can be used to execute in sequence","position":{"start":{"line":328,"column":30,"offset":8822},"end":{"line":328,"column":82,"offset":8874}}}],"position":{"start":{"line":328,"column":1,"offset":8793},"end":{"line":328,"column":82,"offset":8874}}},{"type":"text","value":"\n"}],"position":{"start":{"line":328,"column":1,"offset":8793},"end":{"line":328,"column":82,"offset":8874}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">+</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">executor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">asyncFunc1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">asyncFunc2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">asyncFunc3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'All succeeded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\"Error occured<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":330,"column":1,"offset":8878},"end":{"line":342,"column":4,"offset":9125}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":344,"column":1,"offset":9129},"end":{"line":344,"column":7,"offset":9135}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Execute 3 asynchronous functions one after the other in sequence using promise chaining and do not terminate on failure","position":{"start":{"line":346,"column":5,"offset":9143},"end":{"line":346,"column":127,"offset":9265}}}],"position":{"start":{"line":346,"column":1,"offset":9139},"end":{"line":346,"column":127,"offset":9265}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The promise which gets rejected will invoke the 2nd function argument to ","position":{"start":{"line":348,"column":3,"offset":9271},"end":{"line":348,"column":76,"offset":9344}}},{"type":"raw","value":"<code class=\"language-text\">then</code>","position":{"start":{"line":348,"column":76,"offset":9344},"end":{"line":348,"column":82,"offset":9350}}},{"type":"text","value":" handler","position":{"start":{"line":348,"column":82,"offset":9350},"end":{"line":348,"column":90,"offset":9358}}}],"position":{"start":{"line":348,"column":1,"offset":9269},"end":{"line":348,"column":90,"offset":9358}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The failure handler will receive the error and continue with next execution which will not propagate failures","position":{"start":{"line":349,"column":3,"offset":9362},"end":{"line":349,"column":112,"offset":9471}}}],"position":{"start":{"line":349,"column":1,"offset":9360},"end":{"line":349,"column":112,"offset":9471}}},{"type":"text","value":"\n"}],"position":{"start":{"line":348,"column":1,"offset":9269},"end":{"line":349,"column":112,"offset":9471}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async1 success'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async1 failure'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>async2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async2 success'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async2 failure'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>async3<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async3 success'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async3 failure'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":351,"column":1,"offset":9475},"end":{"line":379,"column":4,"offset":10026}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":381,"column":1,"offset":10030},"end":{"line":381,"column":7,"offset":10036}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Execute 3 asynchronous functions one after the other in sequence using async await and do not terminate on failure","position":{"start":{"line":383,"column":5,"offset":10044},"end":{"line":383,"column":122,"offset":10161}}}],"position":{"start":{"line":383,"column":1,"offset":10040},"end":{"line":383,"column":122,"offset":10161}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Unlike promises, ","position":{"start":{"line":385,"column":3,"offset":10167},"end":{"line":385,"column":20,"offset":10184}}},{"type":"raw","value":"<code class=\"language-text\">try-catch</code>","position":{"start":{"line":385,"column":20,"offset":10184},"end":{"line":385,"column":31,"offset":10195}}},{"type":"text","value":" block can be used on async functions","position":{"start":{"line":385,"column":31,"offset":10195},"end":{"line":385,"column":68,"offset":10232}}}],"position":{"start":{"line":385,"column":1,"offset":10165},"end":{"line":385,"column":68,"offset":10232}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">catch</code>","position":{"start":{"line":386,"column":3,"offset":10236},"end":{"line":386,"column":10,"offset":10243}}},{"type":"text","value":" block for each asynchronous function can be used to catch errors and continue with next execution which will not propagate failures","position":{"start":{"line":386,"column":10,"offset":10243},"end":{"line":386,"column":142,"offset":10375}}}],"position":{"start":{"line":386,"column":1,"offset":10234},"end":{"line":386,"column":142,"offset":10375}}},{"type":"text","value":"\n"}],"position":{"start":{"line":385,"column":1,"offset":10165},"end":{"line":386,"column":142,"offset":10375}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">executor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">asyncFunc1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async1 success'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async1 failure'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">asyncFunc2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async2 success'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async2 failure'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">asyncFunc3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async3 success'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Async3 failure'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'All succeeded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":388,"column":1,"offset":10379},"end":{"line":410,"column":4,"offset":10888}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":412,"column":1,"offset":10892},"end":{"line":412,"column":7,"offset":10898}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Execute an array of asynchronous functions which returns a promise, one after the other in sequence","position":{"start":{"line":414,"column":5,"offset":10906},"end":{"line":414,"column":107,"offset":11008}}}],"position":{"start":{"line":414,"column":1,"offset":10902},"end":{"line":414,"column":107,"offset":11008}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Asynchronous functions can be executed and promises can be captured in an array","position":{"start":{"line":416,"column":3,"offset":11014},"end":{"line":416,"column":82,"offset":11093}}}],"position":{"start":{"line":416,"column":1,"offset":11012},"end":{"line":416,"column":82,"offset":11093}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Array method ","position":{"start":{"line":417,"column":3,"offset":11097},"end":{"line":417,"column":16,"offset":11110}}},{"type":"raw","value":"<code class=\"language-text\">reduce</code>","position":{"start":{"line":417,"column":16,"offset":11110},"end":{"line":417,"column":24,"offset":11118}}},{"type":"text","value":" can be used to make the sequential execution on promise settlement","position":{"start":{"line":417,"column":24,"offset":11118},"end":{"line":417,"column":91,"offset":11185}}}],"position":{"start":{"line":417,"column":1,"offset":11095},"end":{"line":417,"column":91,"offset":11185}}},{"type":"text","value":"\n"}],"position":{"start":{"line":416,"column":1,"offset":11012},"end":{"line":417,"column":91,"offset":11185}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> asyncFuncArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>asyncFunc1<span class=\"token punctuation\">,</span> asyncFunc2<span class=\"token punctuation\">,</span> asyncFunc3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nasyncFuncArr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":419,"column":1,"offset":11189},"end":{"line":425,"column":4,"offset":11379}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> asyncFuncArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>asyncFunc1<span class=\"token punctuation\">,</span> asyncFunc2<span class=\"token punctuation\">,</span> asyncFunc3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nasyncFuncArr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> asyncFunc</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> acc<span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">asyncFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":427,"column":1,"offset":11383},"end":{"line":434,"column":4,"offset":11581}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Notes","position":{"start":{"line":436,"column":8,"offset":11592},"end":{"line":436,"column":13,"offset":11597}}}],"position":{"start":{"line":436,"column":1,"offset":11585},"end":{"line":436,"column":13,"offset":11597}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">Promise.resolve()</code>","position":{"start":{"line":437,"column":1,"offset":11599},"end":{"line":437,"column":20,"offset":11618}}},{"type":"text","value":" is used as the initial value to ","position":{"start":{"line":437,"column":20,"offset":11618},"end":{"line":437,"column":53,"offset":11651}}},{"type":"raw","value":"<code class=\"language-text\">reduce</code>","position":{"start":{"line":437,"column":53,"offset":11651},"end":{"line":437,"column":61,"offset":11659}}},{"type":"text","value":", which resolves the promise immediately,","position":{"start":{"line":437,"column":61,"offset":11659},"end":{"line":437,"column":102,"offset":11700}}}],"position":{"start":{"line":437,"column":1,"offset":11599},"end":{"line":437,"column":102,"offset":11700}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":439,"column":1,"offset":11704},"end":{"line":439,"column":7,"offset":11710}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Execute an array of asynchronous functions simultaneously but print the output in the ordered sequence. Do not wait for printing the data if it already available after promise is settled","position":{"start":{"line":441,"column":5,"offset":11718},"end":{"line":441,"column":194,"offset":11907}}}],"position":{"start":{"line":441,"column":1,"offset":11714},"end":{"line":441,"column":194,"offset":11907}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Array method ","position":{"start":{"line":443,"column":3,"offset":11913},"end":{"line":443,"column":16,"offset":11926}}},{"type":"raw","value":"<code class=\"language-text\">reduce</code>","position":{"start":{"line":443,"column":16,"offset":11926},"end":{"line":443,"column":24,"offset":11934}}},{"type":"text","value":" can be used to make the simultaneously execution on promise settlement","position":{"start":{"line":443,"column":24,"offset":11934},"end":{"line":443,"column":95,"offset":12005}}}],"position":{"start":{"line":443,"column":1,"offset":11911},"end":{"line":443,"column":95,"offset":12005}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Unlike sequential execution, the parallel execution of asynchronous functions happen but the output will executed in order of sequence","position":{"start":{"line":444,"column":3,"offset":12009},"end":{"line":444,"column":137,"offset":12143}}}],"position":{"start":{"line":444,"column":1,"offset":12007},"end":{"line":444,"column":137,"offset":12143}}},{"type":"text","value":"\n"}],"position":{"start":{"line":443,"column":1,"offset":11911},"end":{"line":444,"column":137,"offset":12143}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> asyncFuncArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>asyncFunc1<span class=\"token punctuation\">,</span> asyncFunc2<span class=\"token punctuation\">,</span> asyncFunc3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nasyncFuncArr\n<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">async</span></span> <span class=\"token operator\">=></span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> promise</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":446,"column":1,"offset":12147},"end":{"line":454,"column":4,"offset":12379}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> asyncFuncArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>asyncFunc1<span class=\"token punctuation\">,</span> asyncFunc2<span class=\"token punctuation\">,</span> asyncFunc3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nasyncFuncArr\n<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">async</span></span> <span class=\"token operator\">=></span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> promise</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> acc<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":456,"column":1,"offset":12383},"end":{"line":464,"column":4,"offset":12601}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":466,"column":1,"offset":12605},"end":{"line":466,"column":7,"offset":12611}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Design a utility which takes array of asynchronous functions and returns the 1st successful or non successful result with max waiting time set by the user","position":{"start":{"line":468,"column":5,"offset":12619},"end":{"line":468,"column":162,"offset":12776}}}],"position":{"start":{"line":468,"column":1,"offset":12615},"end":{"line":468,"column":162,"offset":12776}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">Promise.race</code>","position":{"start":{"line":470,"column":3,"offset":12782},"end":{"line":470,"column":17,"offset":12796}}},{"type":"text","value":" is an in built JavaScript method which helps us to return the first resolved or rejected promise data from promises array","position":{"start":{"line":470,"column":17,"offset":12796},"end":{"line":470,"column":139,"offset":12918}}}],"position":{"start":{"line":470,"column":1,"offset":12780},"end":{"line":470,"column":139,"offset":12918}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Timeout feature can be set by adding a function returning a promise which rejects after specified amount of time","position":{"start":{"line":471,"column":3,"offset":12922},"end":{"line":471,"column":115,"offset":13034}}}],"position":{"start":{"line":471,"column":1,"offset":12920},"end":{"line":471,"column":115,"offset":13034}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If any promise resolves before timeout the promise which settles first will be the output else timeout will cause rejection","position":{"start":{"line":472,"column":3,"offset":13038},"end":{"line":472,"column":126,"offset":13161}}}],"position":{"start":{"line":472,"column":1,"offset":13036},"end":{"line":472,"column":126,"offset":13161}}},{"type":"text","value":"\n"}],"position":{"start":{"line":470,"column":1,"offset":12780},"end":{"line":472,"column":126,"offset":13161}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">timeoutFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> delay <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Timeout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> asyncArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>asyncFunc1<span class=\"token punctuation\">,</span> asyncFunc2<span class=\"token punctuation\">,</span> asyncFunc3<span class=\"token punctuation\">,</span> timeoutFunc<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> promiseArr <span class=\"token operator\">=</span> asyncArr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">asyncFunc</span> <span class=\"token operator\">=></span> <span class=\"token function\">asyncFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span>promiseArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":474,"column":1,"offset":13165},"end":{"line":485,"column":4,"offset":13531}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":487,"column":1,"offset":13535},"end":{"line":487,"column":7,"offset":13541}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Design a utility which takes URL and a value for attempts which will attempt to make a fetch request. If on failure it tries again with increasing delay for number of times which user has requested","position":{"start":{"line":489,"column":5,"offset":13549},"end":{"line":489,"column":205,"offset":13749}}}],"position":{"start":{"line":489,"column":1,"offset":13545},"end":{"line":489,"column":205,"offset":13749}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Utility can designed which returns a promise which attempts to make requests and return the data on success","position":{"start":{"line":491,"column":3,"offset":13755},"end":{"line":491,"column":110,"offset":13862}}}],"position":{"start":{"line":491,"column":1,"offset":13753},"end":{"line":491,"column":110,"offset":13862}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":492,"column":3,"offset":13866},"end":{"line":492,"column":7,"offset":13870}}},{"type":"raw","value":"<code class=\"language-text\">fetch</code>","position":{"start":{"line":492,"column":7,"offset":13870},"end":{"line":492,"column":14,"offset":13877}}},{"type":"text","value":" request attempts to make calls after increasing time delay on failure","position":{"start":{"line":492,"column":14,"offset":13877},"end":{"line":492,"column":84,"offset":13947}}}],"position":{"start":{"line":492,"column":1,"offset":13864},"end":{"line":492,"column":84,"offset":13947}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If all the attempts by to get response fails, promise gets rejected","position":{"start":{"line":493,"column":3,"offset":13951},"end":{"line":493,"column":70,"offset":14018}}}],"position":{"start":{"line":493,"column":1,"offset":13949},"end":{"line":493,"column":70,"offset":14018}}},{"type":"text","value":"\n"}],"position":{"start":{"line":491,"column":1,"offset":13753},"end":{"line":493,"column":70,"offset":14018}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">requestManager</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> attempts <span class=\"token operator\">=</span> <span class=\"token number\">3</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> attempts<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>attempts <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">===</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span> <span class=\"token operator\">+</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// driver code</span>\n<span class=\"token function\">requestManager</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://reqbin.com/echo/get/json'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":495,"column":1,"offset":14022},"end":{"line":519,"column":4,"offset":14740}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Notes","position":{"start":{"line":521,"column":8,"offset":14751},"end":{"line":521,"column":13,"offset":14756}}}],"position":{"start":{"line":521,"column":1,"offset":14744},"end":{"line":521,"column":13,"offset":14756}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">1000 + 1000 * i</code>","position":{"start":{"line":522,"column":1,"offset":14758},"end":{"line":522,"column":18,"offset":14775}}},{"type":"text","value":" is used for delay after 1st unsuccessful attempt to fetch, which increases the delay on every iteration","position":{"start":{"line":522,"column":18,"offset":14775},"end":{"line":522,"column":122,"offset":14879}}}],"position":{"start":{"line":522,"column":1,"offset":14758},"end":{"line":522,"column":122,"offset":14879}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"References","position":{"start":{"line":524,"column":8,"offset":14890},"end":{"line":524,"column":18,"offset":14900}}}],"position":{"start":{"line":524,"column":1,"offset":14883},"end":{"line":524,"column":18,"offset":14900}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://dev.to/ycmjason/javascript-fetch-retry-upon-failure-3p6g"},"children":[{"type":"text","value":"https://dev.to/ycmjason/javascript-fetch-retry-upon-failure-3p6g","position":{"start":{"line":526,"column":4,"offset":14907},"end":{"line":526,"column":68,"offset":14971}}}],"position":{"start":{"line":526,"column":3,"offset":14906},"end":{"line":526,"column":69,"offset":14972}}}],"position":{"start":{"line":526,"column":1,"offset":14904},"end":{"line":526,"column":69,"offset":14972}}},{"type":"text","value":"\n"}],"position":{"start":{"line":526,"column":1,"offset":14904},"end":{"line":526,"column":69,"offset":14972}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":528,"column":1,"offset":14976},"end":{"line":528,"column":7,"offset":14982}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Create a generator to return a random number on every request","position":{"start":{"line":530,"column":5,"offset":14990},"end":{"line":530,"column":69,"offset":15054}}}],"position":{"start":{"line":530,"column":1,"offset":14986},"end":{"line":530,"column":69,"offset":15054}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The generation of random number can be implemented in the normal way in the function but will returned and function yields","position":{"start":{"line":532,"column":3,"offset":15060},"end":{"line":532,"column":125,"offset":15182}}}],"position":{"start":{"line":532,"column":1,"offset":15058},"end":{"line":532,"column":125,"offset":15182}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The function will again continue to execute in loop to return a new random number","position":{"start":{"line":533,"column":3,"offset":15186},"end":{"line":533,"column":84,"offset":15267}}}],"position":{"start":{"line":533,"column":1,"offset":15184},"end":{"line":533,"column":84,"offset":15267}}},{"type":"text","value":"\n"}],"position":{"start":{"line":532,"column":1,"offset":15058},"end":{"line":533,"column":84,"offset":15267}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">generatorFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">yield</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// driver code</span>\n<span class=\"token keyword\">const</span> it <span class=\"token operator\">=</span> <span class=\"token function\">generatorFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> rand1 <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> rand2 <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":535,"column":1,"offset":15271},"end":{"line":546,"column":4,"offset":15488}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Notes","position":{"start":{"line":548,"column":8,"offset":15499},"end":{"line":548,"column":13,"offset":15504}}}],"position":{"start":{"line":548,"column":1,"offset":15492},"end":{"line":548,"column":13,"offset":15504}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Genertor function need not complete its execution","position":{"start":{"line":549,"column":1,"offset":15506},"end":{"line":549,"column":50,"offset":15555}}}],"position":{"start":{"line":549,"column":1,"offset":15506},"end":{"line":549,"column":50,"offset":15555}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"References","position":{"start":{"line":551,"column":8,"offset":15566},"end":{"line":551,"column":18,"offset":15576}}}],"position":{"start":{"line":551,"column":1,"offset":15559},"end":{"line":551,"column":18,"offset":15576}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function"},"children":[{"type":"text","value":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function","position":{"start":{"line":553,"column":4,"offset":15583},"end":{"line":553,"column":89,"offset":15668}}}],"position":{"start":{"line":553,"column":3,"offset":15582},"end":{"line":553,"column":90,"offset":15669}}},{"type":"text","value":"*","position":{"start":{"line":553,"column":90,"offset":15669},"end":{"line":553,"column":91,"offset":15670}}}],"position":{"start":{"line":553,"column":1,"offset":15580},"end":{"line":553,"column":91,"offset":15670}}},{"type":"text","value":"\n"}],"position":{"start":{"line":553,"column":1,"offset":15580},"end":{"line":553,"column":91,"offset":15670}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":555,"column":1,"offset":15674},"end":{"line":555,"column":7,"offset":15680}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Q. Search for the presence of a given value in the nested object using generator","position":{"start":{"line":557,"column":5,"offset":15688},"end":{"line":557,"column":85,"offset":15768}}}],"position":{"start":{"line":557,"column":1,"offset":15684},"end":{"line":557,"column":85,"offset":15768}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"With the help of generator Inversion of control is possible","position":{"start":{"line":559,"column":3,"offset":15774},"end":{"line":559,"column":62,"offset":15833}}}],"position":{"start":{"line":559,"column":1,"offset":15772},"end":{"line":559,"column":62,"offset":15833}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Instead of function seaching for the key by passing the callback or key, the logic can be implemented in the controlling code","position":{"start":{"line":560,"column":3,"offset":15837},"end":{"line":560,"column":128,"offset":15962}}}],"position":{"start":{"line":560,"column":1,"offset":15835},"end":{"line":560,"column":128,"offset":15962}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"For..of loop calling the recursive generator function on object can be used to achieve this","position":{"start":{"line":561,"column":3,"offset":15966},"end":{"line":561,"column":94,"offset":16057}}}],"position":{"start":{"line":561,"column":1,"offset":15964},"end":{"line":561,"column":94,"offset":16057}}},{"type":"text","value":"\n"}],"position":{"start":{"line":559,"column":1,"offset":15772},"end":{"line":561,"column":94,"offset":16057}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">objectReader</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token operator\">*</span><span class=\"token function\">objectReader</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">yield</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// driver code</span>\n<span class=\"token keyword\">const</span> it <span class=\"token operator\">=</span> <span class=\"token function\">objectReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">z</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">m</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> searchValue <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> searchValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchValue <span class=\"token operator\">+</span> <span class=\"token string\">\" exists\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":563,"column":1,"offset":16061},"end":{"line":584,"column":4,"offset":16528}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br />","position":{"start":{"line":586,"column":1,"offset":16532},"end":{"line":586,"column":7,"offset":16538}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":589,"column":1,"offset":16544}}}}